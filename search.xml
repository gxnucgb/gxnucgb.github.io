<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>38.继承</title>
      <link href="/2019/08/05/38-%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/08/05/38-%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>面向对象三大特征</p><ul><li>封装，根据职责将属性和方法封装到一个抽象的类中</li><li>继承，实现代码的重用，相同的代码不需要重复编写</li><li>多态，不同的对象调用相同的方法，产生不同的执行结果，增加代码的灵活度</li><li>单继承<br>继承的概念：子类拥有父类的所有方法和属性</li></ul><h4 id="1，继承语法"><a href="#1，继承语法" class="headerlink" title="1，继承语法"></a>1，继承语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">(父类名)</span>：</span></span><br><span class="line"><span class="class">    <span class="title">pass</span></span></span><br></pre></td></tr></table></figure><p>子类继承自父类，可以直接享受父类中已经封装好的方法，不需要再次开发<br>子类中应该根据职责，封装子类特有的属性和方法</p><h4 id="2，继承的传递性"><a href="#2，继承的传递性" class="headerlink" title="2，继承的传递性"></a>2，继承的传递性</h4><ul><li>C类从B类继承，B类有从A类继承，那么C类就具有B类和A类的所有属性和方法</li><li>子类拥有父类以及父类的父类中封装的所有属性和方法</li></ul><h4 id="3，方法的重写"><a href="#3，方法的重写" class="headerlink" title="3，方法的重写"></a>3，方法的重写</h4><ul><li>子类拥有父类的所有方法和属性</li><li>子类继承自父类，可以直接享受父类中已经封装好的方法，不需要再次开发</li></ul><p><strong>应用场景</strong></p><ul><li>当父类的方法不能满足子类需求时，可以对方法进行重写（override）</li></ul><p><strong>重写父类的方法有两种情况</strong></p><ol><li>覆盖父类的方法</li><li>对父类方法进行扩展</li></ol><p><strong>1）覆盖父类的方法</strong></p><ul><li>如果在开发中，父类的方法实现和子类的方法实现完全不同，就可以使用覆盖的方式，在子类中重新编写父类的方法实现</li></ul><p><em>具体的实现方式，就相当于在子类中定义了一个和父类同名的方法并且实现</em></p><p>重写之后，在运行时，只会调用子类中重写的方法，而不会调用父类封装的方法</p><p><strong>2）对父类方法进行扩展</strong></p><ul><li>如果在开发中，子类的方法实现方法中，包含父类的方法实现<ul><li>父类原本封装的方法实现时子类方法的一部分</li></ul></li><li>就可以使用扩展的方式<ol><li>在子类中重写父类的方法</li><li>在需要的位置使用<code>super().父类方法</code>来调用父类方法的执行</li><li>代码其他的位置针对子类的需求，编写子类特有的代码实现</li></ol></li></ul><p><strong>关于super</strong></p><ul><li>在Python中super是一个特殊的类</li><li>super()就是使用super类创建出来的对象</li><li>最常用的场景就是在重写父类时，调用在父类中封装的方法实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37.私有属性和私有方法</title>
      <link href="/2019/08/05/37-%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/05/37-%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在实际开发中，对象的某些属性或方法可能只希望在对象内部被使用，而不希望在外部被访问到</li><li>私有属性就是对象不希望公开的属性</li><li>私有方法就是对象不希望公开的方法</li></ul><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><ul><li>在定义属性或方法时，在属性名或者方法名前面增加<strong>两个下划线</strong>，定义的就是私有属性或方法</li></ul><p><strong><em>注意：</em></strong><br><strong>私有属性在外界不能被直接访问</strong><br><strong>私有方法同样不允许在外界访问</strong><br><strong>在对象的方法内部，是可以访问对象的私有属性的</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36.面向对象-封装</title>
      <link href="/2019/08/05/36-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
      <url>/2019/08/05/36-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li>封装时面向对象编程的一大特点</li><li>面向对象编程的第一步——将属性和方法封装到一个抽象的类中</li><li>外界使用类创建对象，然后让对象调用方法</li><li>对象方法的细节都被封装在类的内部</li></ol><p><strong>案例提示：</strong></p><ol><li>在对象方法内部，是可以可以直接访问对象的属性的</li><li>同一个类创建的多个对象之间，属性互不干预</li><li>一个对象的属性，可以是另一个类创建的对象</li></ol><p><strong>被使用的类，通常应该先开发</strong><br><strong>定义没有初始值的属性</strong><br><strong>在定义属性时，如果不知道设置什么初始值，可以设置为None</strong></p><ul><li>None关键字表示什么都没有</li><li>表示一个空对象，没有方法和属性，是一个特殊的常量</li><li>可以将None赋值给任何一个变量</li></ul><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的内存地址是否一致——是否是同一个对象的引用</p><ul><li>在Python中针对None比较时，建议使用<code>is</code>判断</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>用于判断两个标识符是不是引用同一个对象</td><td>x is y, 类似 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用不同对象</td><td>x is not y, 类似 id(x) !=id(y)</td></tr></tbody></table><p><strong>is 与==区别：</strong></p><ul><li>is 用于判断两个变量引用对象是否为同一个</li><li>==用于判断引用对象的值是否相等</li></ul><p>例子1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我的名字是%s，体重是 %.2f公斤"</span> % (self.name, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s跑步"</span> % self.name)</span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"吃东西%s"</span> % self.name)</span><br><span class="line">        self.weight += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>, <span class="number">74.44</span>)</span><br><span class="line">xiaoming.run()</span><br><span class="line">xiaoming.eat()</span><br><span class="line"></span><br><span class="line">xiaomei = Person(<span class="string">"小美"</span>, <span class="number">45</span>)</span><br><span class="line">xiaomei.eat()</span><br><span class="line">xiaomei.run()</span><br><span class="line"></span><br><span class="line">print(xiaoming)</span><br><span class="line">print(xiaomei)</span><br><span class="line">print(xiaoming)</span><br></pre></td></tr></table></figure><p>例子2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, area)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[%s]占地  %.2f"</span> % (self.name, self. area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, house_type, area)</span>:</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        <span class="comment"># 剩余面积</span></span><br><span class="line">        self.free_area = area</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 家具名词</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># python 能够自动将一对括号内部的代码连接在一起</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"户型： %s\n总面积: %.2f[剩余:%.2f]\n家具:%s"</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">"要添加%s"</span> % item)</span><br><span class="line">        <span class="string">"""if里面变大于号的话，可以用return直接结束，然后不要else"""</span></span><br><span class="line">        <span class="keyword">if</span> item.area &lt; self.free_area:</span><br><span class="line">            self.free_area = self.free_area - item.area</span><br><span class="line">            self.item_list.append(item.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"空间不足，无法添加:%s"</span> % item.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bed = HouseItem(<span class="string">"床"</span>, <span class="number">3</span>)</span><br><span class="line">chest = HouseItem(<span class="string">"衣柜"</span>, <span class="number">2</span>)</span><br><span class="line">table = HouseItem(<span class="string">"餐桌"</span>, <span class="number">1.3</span>)</span><br><span class="line">ball = HouseItem(<span class="string">"巨无霸"</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">print(bed)</span><br><span class="line">print(chest)</span><br><span class="line">print(table)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建房子对象</span></span><br><span class="line">my_home = House(<span class="string">"两室一厅"</span>, <span class="number">60</span>)</span><br><span class="line">my_home.add_item(bed)</span><br><span class="line">my_home.add_item(chest)</span><br><span class="line">my_home.add_item(table)</span><br><span class="line">my_home.add_item(ball)</span><br><span class="line"></span><br><span class="line">print(my_home)</span><br></pre></td></tr></table></figure><p>例子3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, model)</span>:</span></span><br><span class="line">        self.model = model</span><br><span class="line">        self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_buller</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        self.bullet_count += count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"[%s]没有子弹了"</span> % self.model)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.bullet_count -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">"%s 突突 [%d]"</span> % (self.model, self.bullet_count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solder</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 新兵没有枪</span></span><br><span class="line">        self.gun = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 身份运算符</span></span><br><span class="line">        <span class="comment"># if self.gun == None:</span></span><br><span class="line">        <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">"%s没有枪。。。"</span> % self.name)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"冲%s"</span> % self.name)</span><br><span class="line">        self.gun.add_buller(<span class="number">50</span>)</span><br><span class="line">        self.gun.shoot()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ak47 = Gun(<span class="string">"ak47"</span>)</span><br><span class="line"></span><br><span class="line">xusanduo = Solder(<span class="string">"许三多"</span>)</span><br><span class="line">xusanduo.gun = ak47</span><br><span class="line">xusanduo.fire()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35.面向对象-内置方法和属性</title>
      <link href="/2019/08/05/35-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/08/05/35-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="内置方法和属性"><a href="#内置方法和属性" class="headerlink" title="内置方法和属性"></a>内置方法和属性</h3><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td><code>__del__</code></td><td>方法</td><td>对象被从内存中销毁前，会被自动调用</td></tr><tr><td>02</td><td><code>__str__</code></td><td>方法</td><td>返回对象的描述信息，print函数输出使用</td></tr></tbody></table><p><strong>1.<code>__del__</code>方法</strong></p><ul><li><p><strong>在Python中</strong></p><ul><li>当使用 类名()创建对象时，为对象分配完空间后，自动调用<code>__init__</code>方法</li><li>当一个对象被从内存中销毁前，会自动调用<code>__del__</code>方法</li></ul></li><li><p><strong>应用场景</strong></p><ul><li><code>__del__</code>改造初始化方法，可以让创建对象更加灵活</li><li><code>__del__</code>如果希望在对象被销毁前，在做一些事，可以考虑一下<code>__del__</code>方法</li></ul></li><li><p><strong>生命周期</strong></p><ul><li>一个对象从调用 类名()创建，生命周期开始</li><li>一个对象的<code>__del__</code>方法一旦被调用，生命周期结束</li><li>在对象的生命周期内，可以访问对象属性或者让对象调用方法</li></ul></li></ul><p><strong>2.<code>__str__</code>方法</strong></p><ul><li>在Python中，使用print输出对象变量，默认情况下，会输出这个变量引用的对象是由哪一个类创建的对象，以及在内存在内存中的地址，（十六进制表示）</li><li>如果在开发中，希望使用print输出对象变量时，能够打印自定义的内容，就可以利用<code>__str__</code>这个内置方法了</li></ul><p><strong>注意</strong>：<code>__str__</code>方法必须返回一个字符串</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34.面向对象-初始化方法</title>
      <link href="/2019/08/05/34-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/05/34-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>在日常开发中，不推荐在类的外部给对象增加属性<ul><li>如果在运行时，没有找到属性，程序会报错</li></ul></li><li>对象应该包含有哪些属性，应该封装在类的内部</li></ul><h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><ul><li>当使用 类名() 创建对象时，会自动执行以下操作：<ol><li>为对象在内存中分配空间——创建对象</li><li>为对象的属性设置初始值——初始化方法（init）</li></ol></li><li>这个初始化方法就是（<code>__init__</code>）方法，<code>__init__</code>是对象的内置方法<br><code>__init__</code>方法时专门用来定义一个类具体有哪些属性的方法！</li></ul><h4 id="在初始化方法内部定义属性"><a href="#在初始化方法内部定义属性" class="headerlink" title="在初始化方法内部定义属性"></a>在初始化方法内部定义属性</h4><ul><li>在<code>__init__</code>方法内部使用 <code>self.属性名=属性的初始值</code>就可以定义属性</li><li>定义属性之后，再使用类创建的对象都会拥有该属性</li></ul><p>改造初始化方法——初始化的同时设置初始值<br>在开发中，如果希望在创建对象的同时，就设置对象的属性，可以对<code>__init__</code>方法 进行改造<br>把希望设置的属性值，定义成<code>__init__</code>方法的参数<br>在方法内部使用<code>self.属性=形参</code>就收外部传递的参数<br>在创建对象时，使用<code>类名(属性1，属性2...)</code>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, new_name)</span>:</span></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s嗝"</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33.面向对象-self</title>
      <link href="/2019/08/05/33-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-self/"/>
      <url>/2019/08/05/33-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-self/</url>
      
        <content type="html"><![CDATA[<p>self指调用方法的对象</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32.面向对象-定义简单类</title>
      <link href="/2019/08/04/32-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%B1%BB/"/>
      <url>/2019/08/04/32-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%AE%9A%E4%B9%89%E7%AE%80%E5%8D%95%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="定义简单的类"><a href="#定义简单的类" class="headerlink" title="定义简单的类"></a>定义简单的类</h3><p>面向对象是更大的封装，在一个类中封装多个方法，这样通过这个类创建出来的对象，就可以直接调用这些方法了</p><h4 id="定义只包含方法的类"><a href="#定义只包含方法的类" class="headerlink" title="定义只包含方法的类"></a>定义只包含方法的类</h4><p>在Python中要定义一个只包含方法的类，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法1<span class="params">(self, 参数列表)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 方法2<span class="params">(self, 参数列表)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>方法的定义格式和之前学习过的函数几乎一样</li><li>区别在于第一个参数必须是self</li></ul><p><strong>注意：类名的命名规则要符合大驼峰命名法</strong></p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>当一个类定义完成后，要使用这个类来创建对象，语法格式如下：<br><code>对象变量 = 类名()</code></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31.面向对象使用</title>
      <link href="/2019/08/04/31-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/04/31-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="dir内置函数"><a href="#dir内置函数" class="headerlink" title="dir内置函数"></a>dir内置函数</h4><p>利用好dir()函数，可以查看对象内置的所有属性及方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__new__      方法     创建对象时，会被自动调用</span><br><span class="line">__init__       方法      对象被初始化时，会被自动调用</span><br><span class="line">__del__       方法       对象被从内存中前，会被自动调用</span><br><span class="line">__str__         方法       返回对象的信息描述，<span class="keyword">print</span> 函数输出使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30.面向对象</title>
      <link href="/2019/08/04/30-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/08/04/30-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象基本概念"><a href="#面向对象基本概念" class="headerlink" title="面向对象基本概念"></a>面向对象基本概念</h3><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>相比较函数，面向对象是更大的封装，根据职责在一个对象中封装多个方法</p><ol><li>在完成某一需求前，首先确定职责——要做的事情（方法）</li><li>根据职责确定不同的对象，在对象内部封装不同的方法（多个）</li><li>最后完成的代码，就是顺序地让不同的对象调用不同的方法</li></ol><p><strong>特点</strong></p><ol><li>注重对象和职责，不同的对象承担不同的职责</li><li>更加适合应对复杂的需求变化，是专门应对复杂项目开发，提供的固定套路</li><li>需要在面向过程的基础上，再学习一些面向对象的语法</li></ol><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul><li><p>类是对一群具有相同特征或者行为的事物的一个统称，是抽象的，不能只是使用</p><ul><li>特征被称为属性</li><li>行为被称为方法</li></ul></li><li><p>对象是由类创建出来的一个具体存在，可以直接使用</p></li><li><p>由哪一个类创建出来的对象，就拥有在哪一个类中定义的</p><ul><li>属性</li><li>方法</li></ul></li></ul><p><strong>在程序开发中，应该先有类，再有对象</strong></p><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><ul><li>类是模板，对象是根据类这个模板创建出来的，应该先有类，再有对象</li><li>类只有一个，而对象可以有很多个<ul><li>不同对象之间属性可能会各不相同</li></ul></li><li>类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少</li></ul><h4 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h4><p>在使用面向对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！</p><p>在程序开发中，要设置一个类，通常要满足一下三个要素</p><ol><li><strong>类名</strong>，这类事物的名字，满足大驼峰命名法（每一个单词首字母大写，第一个也大写）</li><li><strong>属性</strong>，这类事物具有什么样的特征</li><li><strong>方法</strong>，这类事物具有什么样的行为</li></ol><h4 id="类名的确定"><a href="#类名的确定" class="headerlink" title="类名的确定"></a>类名的确定</h4><p>名词提炼法分析整个业务流程图，出现的名词，通常就是要找到的类</p><h4 id="属性和方法的确定"><a href="#属性和方法的确定" class="headerlink" title="属性和方法的确定"></a>属性和方法的确定</h4><ul><li>对 对象的特征描述，通常可以定义成属性</li><li>对象具有的行为（动词），通常可以定义成方法</li></ul><p><strong>提示</strong>：需求中没有涉及的属性或者方法在涉及类时，不需要考虑</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>29.函数的递归</title>
      <link href="/2019/08/04/29-%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92/"/>
      <url>/2019/08/04/29-%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h3 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h3><p>函数调用自身的编程技巧称为递归</p><h4 id="递归函数的特点"><a href="#递归函数的特点" class="headerlink" title="递归函数的特点"></a>递归函数的特点</h4><p><strong>特点</strong></p><ul><li>一个函数内部调用自己<br>函数内部可以调用其他函数，当然在函数内部也可以调用自己</li><li>代码特点</li></ul><ol><li>函数内部的代码是相同的，只是针对参数不同，处理的结果不同</li><li>当参数满足一个条件时，函数不再执行<ul><li>这个<strong>非常重要</strong>，通常被称为递归的出口，否则就会出现死循环</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28.缺省参数</title>
      <link href="/2019/08/04/28-%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/"/>
      <url>/2019/08/04/28-%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><ul><li>定义 函数时，可以给某个参数指定一个默认值，具有默认值的参数就叫做缺省参数</li><li>调用函数时，如果没有传入缺省参数的值，则在函数内部使用定义函数时指定的参数默认值</li><li>函数的缺省参数，将常见的值设置为参数的缺省值，从而简化函数的调用</li><li>例如：对列表的排序方法<br><code>sort()</code><br><code>sort(reverse=True)</code></li></ul><h4 id="指定参数的缺省值"><a href="#指定参数的缺省值" class="headerlink" title="指定参数的缺省值"></a>指定参数的缺省值</h4><p>在参数后使用赋值语句，可以指定参数的缺省值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(name, gender=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param name: 班上同学姓名</span></span><br><span class="line"><span class="string">    :param gender: True为男生，False为女神</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    gender_text = <span class="string">"男生"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">"女"</span></span><br><span class="line">    print(name,  gender_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_info(<span class="string">"hh"</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>缺省参数，需要使用最常见的值作为默认值</li><li>如果一个参数的值不能确定，则不应该设置默认值，具体的数值在调用函数时，由外界传递</li></ol><h4 id="缺省参数的注意事项"><a href="#缺省参数的注意事项" class="headerlink" title="缺省参数的注意事项"></a>缺省参数的注意事项</h4><ul><li>缺省参数的定义位置<br>必须保证带有默认值的缺省参数在参数列表末尾</li><li>调用带有多个缺省参数的函数<br>在函数调用时，如果有多个缺省参数，需要指定参数名，这样解释器才能知道参数的对应关系</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27.函数参数和返回值作用</title>
      <link href="/2019/08/04/27-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BD%9C%E7%94%A8/"/>
      <url>/2019/08/04/27-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="函数参数和返回值作用"><a href="#函数参数和返回值作用" class="headerlink" title="函数参数和返回值作用"></a>函数参数和返回值作用</h3><p>函数根据有没有参数一级有没有返回值，可以相互组合，一共有4种组合形式<br>1，无参数，无返回值<br>2，无参数，有返回值<br>3，有参数，有返回值<br>4，有参数，有返回值</p><p>函数：封装独立功能的代码，在需要时通过函数名被调用，可以直接访问全局变量<br>参数：外界希望在函数内部处理的数据<br>返回值：向外界报告函数的执行结果</p><p><strong>定义函数时，是否接收参数，或者是否返回结果，是根据实际功能需求来决定的</strong><br>1，如果函数内部处理的数据不确定，就可以将外界的数据以参数传递到函数内部<br>2，如果希望一个函数执行完成后，向外界汇报执行结果，就可以增加函数的返回值</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>元组可以包含多个数据，因此可以使用元组让函数一次返回多个值<br>如果函数返回的类型是元组，小括号可以省略</p><p>如果函数返回的类型是元组，同事希望单独处理元组中的元素，可以使用多个变量，一次接受函数的返回结果<br>注意：使用多个变量接收结果时，变量的个数应该和元组中的个数保持一致</p><p>(交换数据，右边的是一个元组，可以省去括号)<br>a, b = b, a</p><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>参数是可变类型的，如果一个是使用方法，一个是使用赋值，则赋值的不变，使用方法的变</p><ol><li>无论传递的参数是可变还是不可变，只要<strong>针对参数</strong>使用 <strong>赋值语句</strong> ，会在函数内部修改局部变量的引用，不会影响到外部变量的引用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num, num_list)</span>:</span></span><br><span class="line">    <span class="comment"># 在函数内部，针对参数使用赋值语句，不会修改到外部的实参变量</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    num_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    print(num)</span><br><span class="line">    print(num_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_num = <span class="number">90</span></span><br><span class="line">gl_list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">demo(gl_num, gl_list)</span><br><span class="line">print(gl_num)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="number">90</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>如果传递的参数是 <strong>可变类型</strong>，在函数内部，使用 <strong>方法</strong> 修改了数据的内容，同样会影响到外部的数据</li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num_list)</span>:</span></span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">"函数内部的代码"</span>)</span><br><span class="line">    <span class="comment"># 使用方法修改列表的内容</span></span><br><span class="line">    num_list.append(<span class="number">9</span>)  <span class="comment"># 参数的话是没有提示方法的</span></span><br><span class="line">    print(num_list)</span><br><span class="line">    print(<span class="string">"函数执行完成"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gl_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">demo(gl_list)</span><br><span class="line">print(gl_list)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">函数内部的代码</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line">函数执行完成</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>列表变量使用 += 不会做相加再赋值的操作，本质上是在调用列表的extend方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不变</span><br><span class="line">num_list = num_list +num_list</span><br><span class="line">变</span><br><span class="line">num_list += num_list 等价于 num_list.extend(num_list)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26.名片管理系统</title>
      <link href="/2019/08/03/26-%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/08/03/26-%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="名片管理系统框架搭建"><a href="#名片管理系统框架搭建" class="headerlink" title="名片管理系统框架搭建"></a>名片管理系统框架搭建</h3><p>1，准备文件，确定文件名，保证能够在需要的位置编写代码<br>2，编写主运行循环，实现基本的用户输入和判断</p><h4 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h4><p> 1，使用 in 针对列表判断，避免使用or 拼接复杂的逻辑条件<br> 2，没有使用int 转换用户输入，可以避免一旦用户输入的不是数字，导致程序运行出错</p><h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><p>pass就是一个空语句，不做任何事情，一般用作站位语句，是为了保持程序结构的完整性</p><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><p>在开发软件时，如果不希望程序执行后立即退出，可以在程序中增加一个无限循环，由用户来决定退出程序的时机</p><h4 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h4><p>在 # 后跟上 TODO ，用于标记需要去做的工作<br><code># TODO(xxx) xxx</code><br>return 可以返回一个函数的执行结果，下方的代码不会被执行，如果return后面没有任何内容，表示会返回到调用函数的位置并且不返回任何结果</p><p>注释文档在写完函数之后，别忘了写</p><h4 id="cards-main-py"><a href="#cards-main-py" class="headerlink" title="cards_main.py"></a>cards_main.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cards_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    action = input(<span class="string">"请选择操作功能"</span>)</span><br><span class="line">    print(<span class="string">"您的输入是【%s】"</span> % action)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    前面是没有加int的话</span></span><br><span class="line"><span class="string">    可以用 if act in ["1", "2", "3"]</span></span><br><span class="line"><span class="string">    然后用 elif,else</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#  新增名片</span></span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">"1"</span>:</span><br><span class="line">        cards_tools.new_card()</span><br><span class="line">    <span class="comment"># 显示全部</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"2"</span>:</span><br><span class="line">        cards_tools.show_all()</span><br><span class="line">    <span class="comment"># 查询名片</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"3"</span>:</span><br><span class="line">        cards_tools.search_card()</span><br><span class="line">    <span class="comment"># 退出系统</span></span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">"0"</span>:</span><br><span class="line">        print(<span class="string">"欢迎再次使用系统"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"您的输入有误，请重新输入"</span>)</span><br></pre></td></tr></table></figure><h4 id="cards-tools-py"><a href="#cards-tools-py" class="headerlink" title="cards_tools.py"></a>cards_tools.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 记录所有的名片的字典</span></span><br><span class="line">card_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_menu</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    显示菜单</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">    print(<span class="string">"欢迎使用名片管理系统\n1.新建名片\n2.显示全部\n3.查询名片\n\n0.退出系统"</span>)</span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_card</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    新增名片</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line">    print(<span class="string">"新增名片"</span>)</span><br><span class="line">    <span class="comment"># 1.提示用户输入名片的详细信息</span></span><br><span class="line">    name_str = input(<span class="string">"请输入姓名"</span>)</span><br><span class="line">    phone_str = input(<span class="string">"请输入电话"</span>)</span><br><span class="line">    qq_str = input(<span class="string">"请输入qq"</span>)</span><br><span class="line">    email_str = input(<span class="string">"请输入邮箱"</span>)</span><br><span class="line">    <span class="comment"># 2.使用用户输入的信息建立一个名片字典</span></span><br><span class="line">    card_dict = &#123;<span class="string">"name"</span>: name_str,</span><br><span class="line">                 <span class="string">"phone"</span>: phone_str,</span><br><span class="line">                 <span class="string">"qq"</span>: qq_str,</span><br><span class="line">                 <span class="string">"email"</span>: email_str&#125;</span><br><span class="line">    <span class="comment"># 3.讲名片字典添加到列表中</span></span><br><span class="line">    card_list.append(card_dict)</span><br><span class="line">    print(card_list)</span><br><span class="line">    <span class="comment"># 4.提示用户添加成功</span></span><br><span class="line">    print(<span class="string">"%s 添加成功"</span> % name_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""显示所有名片"""</span></span><br><span class="line">    <span class="comment"># 判断是否存在名片记录，如果没有，提示并返回</span></span><br><span class="line">    <span class="keyword">if</span> len(card_list) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有名片记录"</span>)</span><br><span class="line">        <span class="comment"># return 可以返回一个函数的执行结果，下方的代码不会被执行，如果return后面没有任何内容，表示会返回到调用函数的位置并且不返回任何结果</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 打印表头</span></span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line">    print(<span class="string">"显示所有名片"</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">"name"</span>, <span class="string">"phone"</span>, <span class="string">"qq"</span>, <span class="string">"email"</span>]:</span><br><span class="line">        print(name, end=<span class="string">"\t\t\t"</span>)</span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 打印分割线</span></span><br><span class="line">    print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 遍历输出字典信息</span></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        print(<span class="string">"%s\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t"</span> % (card_dict[<span class="string">"name"</span>],</span><br><span class="line">                                                    card_dict[<span class="string">"phone"</span>],</span><br><span class="line">                                                    card_dict[<span class="string">"qq"</span>],</span><br><span class="line">                                                    card_dict[<span class="string">"email"</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_card</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查找名片</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line">    print(<span class="string">"查找名片"</span>)</span><br><span class="line">    <span class="comment"># 1.提示用户输入要搜索的名字</span></span><br><span class="line">    find_name = input(<span class="string">"请输入要搜索的姓名："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.遍历名片列表，查询要搜索的名字，如果没有找到，需要提示用户</span></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="keyword">if</span> find_name == card_dict[<span class="string">"name"</span>]:</span><br><span class="line">            print(<span class="string">"找到了"</span>)</span><br><span class="line">            print(<span class="string">"name\t\t\tphone\t\t\tqq\t\t\temail"</span>)</span><br><span class="line">            print(<span class="string">"="</span>*<span class="number">20</span>)</span><br><span class="line">            print(<span class="string">"%s\t\t\t%s\t\t\t%s\t\t\t%s"</span> % (card_dict[<span class="string">"name"</span>],</span><br><span class="line">                                                  card_dict[<span class="string">"phone"</span>],</span><br><span class="line">                                                  card_dict[<span class="string">"qq"</span>],</span><br><span class="line">                                                  card_dict[<span class="string">"email"</span>]))</span><br><span class="line">            <span class="comment"># 增加修改删除功能</span></span><br><span class="line">            deal_card(card_dict)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"没找到%s"</span> % find_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_card</span><span class="params">(find_dict)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    处理查找到的名片</span></span><br><span class="line"><span class="string">    :param find_dict: 查找到的名片</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(find_dict)</span><br><span class="line">    action_str = input(<span class="string">"请选择要选择的操作，"</span></span><br><span class="line">                       <span class="string">"1，修改  2，删除  0返回上一级"</span>)</span><br><span class="line">    <span class="keyword">if</span> action_str == <span class="string">"1"</span>:</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"修改名片成功"</span>)</span><br><span class="line">        find_dict[<span class="string">"name"</span>] = input_card_info(find_dict[<span class="string">"name"</span>], <span class="string">"姓名："</span>)</span><br><span class="line">        find_dict[<span class="string">"phone"</span>] = input_card_info(find_dict[<span class="string">"phone"</span>], <span class="string">"phone："</span>)</span><br><span class="line">        find_dict[<span class="string">"qq"</span>] = input_card_info(find_dict[<span class="string">"qq"</span>], <span class="string">"qq："</span>)</span><br><span class="line">        find_dict[<span class="string">"email"</span>] = input_card_info(find_dict[<span class="string">"email"</span>], <span class="string">"email："</span>)</span><br><span class="line">    <span class="keyword">elif</span> action_str == <span class="string">"2"</span>:</span><br><span class="line">        card_list.remove(find_dict)</span><br><span class="line">        print(<span class="string">"删除名片成功"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_card_info</span><span class="params">(dict_value, tip_message)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    修改</span></span><br><span class="line"><span class="string">    1.提示用户输入</span></span><br><span class="line"><span class="string">    2，针对用户输入进行判断，如果用户输入了内容，直接返回结果</span></span><br><span class="line"><span class="string">    3，如果没有输入，返回原来的值</span></span><br><span class="line"><span class="string">    :param dict_value: 字典中原有值</span></span><br><span class="line"><span class="string">    :param tip_message: 输入提示文字</span></span><br><span class="line"><span class="string">    :return: 若输入有信息，则更新信息，若没输入，则返回原来信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result_str = input(tip_message)</span><br><span class="line">    <span class="keyword">if</span> len(result_str) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>25.公共方法（2）完整的for循环语法</title>
      <link href="/2019/08/03/25-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%882%EF%BC%89%E5%AE%8C%E6%95%B4%E7%9A%84for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/08/03/25-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%882%EF%BC%89%E5%AE%8C%E6%95%B4%E7%9A%84for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="完整的for循环语法"><a href="#完整的for循环语法" class="headerlink" title="完整的for循环语法"></a>完整的for循环语法</h3><p>在Python中完整的for循环的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">循环体代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">没有通过<span class="keyword">break</span>退出循环，循环结束后，会执行的代码</span><br></pre></td></tr></table></figure><p>如果使用了break，那么else的代码就不会执行</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在迭代遍历嵌套的数据类型时，例如一个列表包含了多个字典</li><li>需求：要判断某一字典中是否存在指定的值<ol><li>如果存在，提示并且退出循环</li><li>如果不存在，在循环整体结束后，希望得到一个统一的提示</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"sex"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"sex"</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 搜索指定的姓名</span></span><br><span class="line">find_name = <span class="string">"张三"</span></span><br><span class="line"><span class="keyword">for</span> stu_dict <span class="keyword">in</span> students:</span><br><span class="line">    print(stu_dict)</span><br><span class="line">    <span class="keyword">if</span> stu_dict[<span class="string">"name"</span>] == find_name:</span><br><span class="line">        print(<span class="string">"找到了 %s"</span> % find_name)</span><br><span class="line"><span class="comment"># 找到结束</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 如果在搜索列表时，所有的字典检查之后，都没有需要的目标，得到一个统一的提示</span></span><br><span class="line">print(<span class="string">"没找到"</span>)</span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.公共方法（1）运算符</title>
      <link href="/2019/08/03/24-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%881%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2019/08/03/24-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%881%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td>+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td>*</td><td>[hi]</td><td>[‘hi’, ‘hi’, ‘hi’, ‘hi’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td>in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td>&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 3, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>in 在对字典进行操作时，判断的是字典的键</li><li>in 和 not in 被称为成员运算符</li><li>extends 和 append 连接的时候，会生成一个新的对象，不修改原有对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22.公共方法</title>
      <link href="/2019/08/02/22-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/02/22-%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h3><p>python包含了一下内置函数：</p><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式，关键字或函数</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对key比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对key比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较大小</td><td>python3取消，可用&lt;&gt;=比较运算符</td></tr></tbody></table><p>注意：字符串比较符合一下规则：“0”&lt; “A” &lt;”a”</p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><table><thead><tr><th>描述</th><th>python表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td>切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><ul><li>切片使用索引值来限定范围，从一个大的字符串中切出小的字符串</li><li>列表和元组都是有序的集合，都能够通过索引值获取到对应的数据</li><li>字典是要给无序的集合，是使用键值对保存数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21.字符串的切片</title>
      <link href="/2019/08/02/21-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%87%E7%89%87/"/>
      <url>/2019/08/02/21-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h3><ul><li>切片方法适用于字符串、列表、元组</li></ul><ol><li>切片使用索引值来限定范围，从一个大的字符串中切出小的字符串</li><li>列表和元组都是有序的集合，都能够通过索引值获取到对应的数据</li><li>字典是一个无需的集合，是用键值对保存数据<br><code>字符串[开始索引 : 结束索引 : 步长]</code><br>逆序：字符串[: :-1]<br><strong>注意：</strong><br>1 .  指定的区间属于左闭右开型，从开始位开始，到结束位的前一位（不包括结束位本身）<br>2 .  从头开始，开始索引数字可以省略，冒号不能省略<br>3 .  到末尾结束，结束索引数字可以省略，冒号不能省略<br>4 .  步长默认为1，如果连续切片，数字和冒号都可以省略</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.字符串常用方法</title>
      <link href="/2019/08/02/20-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/08/02/20-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="判断类型-9"><a href="#判断类型-9" class="headerlink" title="判断类型-9"></a>判断类型-9</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果string 中只包含空格，则返回True （’\t’, ‘\r’, ‘\n’）</td></tr><tr><td>string.isalnum()</td><td>如果string 至少有一个字符并且所有字符都是字母或数字则返回True</td></tr><tr><td>string.isalpha()</td><td>如果string 至少有一个字符并且所有字符都是字母则返回True</td></tr><tr><td>string.isdecimal()</td><td>如果string 只包含数字则返回True，全角数字 （常用）</td></tr><tr><td>string.isdigit</td><td>如果string 只包含数字则返回True，全角数字、（1）、\u00b2</td></tr><tr><td>string.isnumeric()</td><td>如果string 只包含数字则返回True，全角数字，汉字数字</td></tr><tr><td>string.istitle()</td><td>如果string 是标题化的（每个单词的首字母大写）则返回True</td></tr><tr><td>string.islower()</td><td>如果string 包含至少一个区分大小写的字符，并且所有这些（区分大小写的）字符都是小写的，则返回True</td></tr><tr><td>string.isupper()</td><td>如果string 中包含至少一个区分大小写的字符，并且所有这些（区分大小写的）字符都是大写，则返回True</td></tr></tbody></table><h3 id="查找和替换-7"><a href="#查找和替换-7" class="headerlink" title="查找和替换-7"></a>查找和替换-7</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.starstwith(str)</td><td>检查字符串是否以str开头（区分大小写），是则返回True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否以str 结束（区分大小写），是则返回True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测str包含在string中，如果start和end指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则（不存在）返回-1，（index同样可以查找指定的字符串在大字符串中的索引，如果指定的字符串不存在，会报错）</td></tr><tr><td>stiring.rfind(str, start=0, end=len(string))</td><td>类似于find()函数，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟find()方法类似，只不过str不在string会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把是string 中的old_str 替换成new_str，如果num 指定，则替换不超过 num次（replace方法执行完成后，会返回一个新的字符串，注意：不会修改原有的字符串内容）</td></tr></tbody></table><h3 id="大小写转换-5"><a href="#大小写转换-5" class="headerlink" title="大小写转换-5"></a>大小写转换-5</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单子首字母大写</td></tr><tr><td>string.lower()</td><td>转换string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换string中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转string中的大小写</td></tr></tbody></table><h3 id="文本对齐-3"><a href="#文本对齐-3" class="headerlink" title="文本对齐-3"></a>文本对齐-3</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至width的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至width的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至width的新字符串</td></tr></tbody></table><h3 id="去除空白字符-3"><a href="#去除空白字符-3" class="headerlink" title="去除空白字符-3"></a>去除空白字符-3</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>sting.lstrip()</td><td>截掉string左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉string右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉string左右两边的空白字符</td></tr></tbody></table><h3 id="拆分和连接-5"><a href="#拆分和连接-5" class="headerlink" title="拆分和连接-5"></a>拆分和连接-5</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串string分成一个3元组的元组（str前面, str, str后面）</td></tr><tr><td>string.rpartition</td><td>类似于partition()函数，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以str为分隔符切片string，如果num有指定值，则仅分隔num+1个子字符串，str默认包含’\t’, ‘\r’, ‘\n’和空格</td></tr><tr><td>string.splitlines()</td><td>按照行（’\t’, ‘\r’, ‘\n’）分隔，返回一个包含各行元素的列表</td></tr><tr><td>string.join(seq)</td><td>以string 作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.字符串</title>
      <link href="/2019/08/02/19-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/08/02/19-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h3><ul><li>字符串就是一串字符，是编程语言中表示文本的数据类型</li><li>在python中可以使用一对双引号 “ 或者一对单引号 ‘ 来定义一个字符串<br>虽然可以使用 \”或者&#39; 做字符串的转义，但是在实际开发中：<br>如果字符串内部需要使用 “ ,可以使用 ‘ 定义字符串<br>如果字符串内部需要使用 ‘ ,可以使用 “ 定义字符串</li><li>也可以使用索引获取字符串中指定位置的字符，索引计数从0开始</li><li>也可以使用 for 循环遍历字符串中每一个字符<br>大多数编程语言都是用 ”来定义字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"hello python"</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> string:</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li></ul><p>len(字符串) 获取字符串的长度<br>字符串.count(字符串) 小字符串在大字符串中出现的次数<br>字符串[索引] 从字符串中取出单个字符<br>字符串.index(字符串)获得小字符串第一次出现的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello_str = <span class="string">"hello py"</span></span><br><span class="line"><span class="comment"># 统计字符串长度</span></span><br><span class="line">print(len(hello_str))</span><br><span class="line"><span class="comment"># 统计某一个子字符串出现的次数</span></span><br><span class="line">print(hello_str.count(<span class="string">"l"</span>))</span><br><span class="line"><span class="comment"># 某一个子字符串出现的位置，注意：如果使用index方法传递的子字符串不存在，程序会报错</span></span><br><span class="line">print(hello_str.index(<span class="string">"aaa"</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.字典（1）循环遍历</title>
      <link href="/2019/08/02/18-%E5%AD%97%E5%85%B8%EF%BC%881%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2019/08/02/18-%E5%AD%97%E5%85%B8%EF%BC%881%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><p>遍历基于是以此从字典中获取所有键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环内部使用的“key”的变量 <span class="keyword">in</span> 字典：</span><br><span class="line">内容....</span><br></pre></td></tr></table></figure><p>提示:在实际开发中，由于字典中每一个键值对保存数据的类型是不同的，所以针对字典的遍历需求并不是很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">19</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.84</span>&#125;</span><br><span class="line"><span class="comment"># 迭代遍历字典</span></span><br><span class="line"><span class="comment"># 遍历k是每一次循环重，获取到的键值对的key</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line">    print(<span class="string">"%s ——%s"</span> % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>尽管可以使用for in 遍历字典</li><li>但是在开发中，更多的应用场景是：</li></ul><ol><li>使用多个键值对，存储描述一个物体相关的信息——描述更复杂的数据信息</li><li>将多个字典放在一个列表中，再进行遍历，再循环体内部针对每一个字典进行相同的处理<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">car_list = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"li"</span>,</span><br><span class="line">     <span class="string">"sex"</span>: <span class="string">"boy"</span>,</span><br><span class="line">     <span class="string">"age"</span>: <span class="number">22</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"liaa"</span>,</span><br><span class="line">     <span class="string">"sex"</span>: <span class="string">"boy"</span>,</span><br><span class="line">     <span class="string">"age"</span>: <span class="number">22</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> car_info <span class="keyword">in</span> car_list:</span><br><span class="line">    print(car_info)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.字典</title>
      <link href="/2019/08/02/17-%E5%AD%97%E5%85%B8/"/>
      <url>/2019/08/02/17-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h3><ul><li>dictionary （字典）是除列表以为python之中最灵活的数据类型</li><li>字典通用可以用来存储多个数据</li></ul><ol><li>通常用来存储一个物体的相关信息</li></ol><ul><li>和列表的区别</li></ul><ol><li>列表是有序的对象集合</li><li>字典是无序的对象集合</li></ol><ul><li>字典用 {} 定义</li><li>字典用键值对存储数据，键值对之间使用 ，分隔</li></ul><ol><li>键 key 是索引</li><li>值 value 是数据</li><li>键和值之间使用 ：分隔</li><li>键必须是唯一的</li><li>值 可以取任何数据类型， 但键 只能使用 字符串、数据或元组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">19</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.84</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取值，在取值的时候，如果指定的key不存在，程序会报错</span></span><br><span class="line">print(xiaoming[<span class="string">"name"</span>])</span><br><span class="line"><span class="comment"># 增加/修改</span></span><br><span class="line"><span class="comment"># 如果key不存在，会增加新键值对，如果key存在，会修改已经存在的键值对</span></span><br><span class="line">xiaoming[<span class="string">"age"</span>] = <span class="number">18</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="comment"># 在删除指定键值对的时候，如果指定的key不存在，程序会报错</span></span><br><span class="line">xiaoming.pop(<span class="string">"height"</span>)</span><br><span class="line"><span class="comment"># 统计键值对数量</span></span><br><span class="line">print(len(xiaoming))</span><br><span class="line"><span class="comment"># 合并字典，注意:如果被合并的字典中包含已经存在的键值对，会覆盖原有的键值对</span></span><br><span class="line">temp_dict = (<span class="string">"height"</span>:<span class="number">178</span>, <span class="string">"age"</span>:<span class="number">33</span>)</span><br><span class="line">xiaoming.update(temp_dict)</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">xiaoming.clear()</span><br><span class="line">print(xiaoming)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.元组（1）循环遍历</title>
      <link href="/2019/08/02/16-%E5%85%83%E7%BB%84%EF%BC%881%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2019/08/02/16-%E5%85%83%E7%BB%84%EF%BC%881%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><ul><li><p>取值就是从元组中获取存储在指定位置的数据</p></li><li><p>遍历就是从头到尾一次从元组中获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 循环内部使用的变量 <span class="keyword">in</span> 元组：</span><br><span class="line">    循环内部针对元组进行操作</span><br></pre></td></tr></table></figure></li><li><p>在python中，可以使用for循环遍历所有非数字类型的遍历：列表、元组、字典以及字符串</p></li><li><p>提示：在实际开发中，除非能够确认元组中的数据类型，否则针对元组的循环遍历要求并不是很多</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>尽管可以使用 for in 遍历元组</li><li>但是在开发中，更多的应用场景是：</li></ul><ol><li>函数的参数和返回值，一个函数可以接收任意多个参数，或者一次返回多个数据</li><li>格式字符串，格式化字符串后面的（）本质上就是一个元组</li><li>让列表不可以被修改，以保护数据安全<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">"zhangsan"</span>, <span class="number">18</span>)</span><br><span class="line">print(<span class="string">"%s 的年龄是 %d"</span> % info)</span><br></pre></td></tr></table></figure></li></ol><p><strong>元组和列表之间的转换</strong></p><ul><li>使用list 函数可以把元组转换成列表<br><code>list(元组)</code></li><li>使用 tuple 函数可以把列表转换成元组<br><code>tuple(列表)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.元组</title>
      <link href="/2019/08/01/15-%E5%85%83%E7%BB%84/"/>
      <url>/2019/08/01/15-%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h3><ul><li>Tuple（元组）与列表类似，不同之处在于元组的元素不能更改</li></ul><ol><li>元组表示多个元素组成的序列</li><li>元组在python开发中，有特定的应用场景</li></ol><ul><li>用于存储一串信息，数据之间使用 ，分隔</li><li>元组用（）定义</li><li>元组的索引从 0 开始<br>索引 就是数据在元组中的位置编号<br><code>info_tuple = (&quot;zhangsan &quot;, 22, 170)</code></li></ul><p><strong>元组中只包含一个元素时，需要在元素后面添加逗号</strong><br><code>info_tuple = (50, )</code><br><strong>没有逗号的话就是一个int类型的数据了</strong><br>.index（） 已经知道数据的内容，希望知道该数据在元组中的索引<br>.count()统计元组中元素出现的个数</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.列表（1）循环遍历</title>
      <link href="/2019/08/01/14-%E5%88%97%E8%A1%A8%EF%BC%882%EF%BC%89-1/"/>
      <url>/2019/08/01/14-%E5%88%97%E8%A1%A8%EF%BC%882%EF%BC%89-1/</url>
      
        <content type="html"><![CDATA[<h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><p>遍历就是从头到尾一次从列表中获取数据<br>在循环体内部针对每一个元素，执行相同的操作<br>在python中为了提高列表的遍历效率，专门提高迭代iteration 遍历<br>使用for 就能够实现迭代遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> 循环内部使用的变量 <span class="keyword">in</span> 列表：</span><br><span class="line">循环内部针对列表元素进行的操作</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ul><li>尽管python的列表中可以存储不同类型的数据</li><li>但是在开发中，更多的应用场景事</li></ul><ol><li>列表 存储相同类型的数据</li><li>通过 迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.列表（1）</title>
      <link href="/2019/08/01/13-%E5%88%97%E8%A1%A8%EF%BC%881%EF%BC%89/"/>
      <url>/2019/08/01/13-%E5%88%97%E8%A1%A8%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="关键字，函数和方法出坑"><a href="#关键字，函数和方法出坑" class="headerlink" title="关键字，函数和方法出坑"></a>关键字，函数和方法出坑</h3><ul><li>关键字是python内置的，具有特殊意义的标识符</li></ul><p><strong>关键字后面不需要使用括号</strong></p><ul><li>函数 封装了独立功能，可以直接调用</li></ul><p><em>函数名（参数）</em><br><strong>函数需要死记硬背</strong></p><ul><li>方法和函数类似，同样是封装了独立的功能</li><li>方法需要通过对象来调用，表针对这个对象要做的操作</li></ul><p><em>对象.方法名（参数）</em><br>在变量后面输入 . 然后选择针对这个变量要执行的操作，记忆起来比函数简单很多</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.列表</title>
      <link href="/2019/08/01/12-%E5%88%97%E8%A1%A8/"/>
      <url>/2019/08/01/12-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h3><ul><li>list （列表） 是python中使用最频繁的数据类型，在其他语言中通常叫做数组</li><li>专门用于存储一串信息</li><li>列表用 [] 定义，数据之间使用 ，分隔</li><li>列表的索引从 0 开始<br>索引就是数据在列表中的位置编号，索引又可以被称为下表</li></ul><p><strong>注意：从列表中取值时，如果超出索引范围，程序会报错</strong></p><table><thead><tr><th>分类</th><th>关键字/函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>增加</td><td>列表.insert(索引，数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td>列表.extend(列表2)</td><td>将列表2的数据追加到列表</td></tr><tr><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td>列表pop（索引）</td><td>删除指定索引数据</td></tr><tr><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>统计</td><td>len（列表）</td><td>列表长度</td></tr><tr><td></td><td>列表.count（数据）</td><td>数据在列表中出现的次数</td></tr><tr><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><p>提示：在日常开发中，要从列表删除数据，建议使用列表提供的方法<br>  注意：如果使用del 关键字将变量从内存中删除，后续代码就不能再使用这个变量了</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.预先知识</title>
      <link href="/2019/08/01/11-%E9%A2%84%E5%85%88%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/08/01/11-%E9%A2%84%E5%85%88%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>python 中的数据类型可分为数字型和非数字型</p><ul><li>非数字型：</li></ul><ol><li>字符串</li><li>列表</li><li>元组</li><li>字典</li></ol><ul><li>在python中，所有非数字型变量都支持以下特点：</li></ul><ol><li>都是一个序列 sequence ，也可以理解为容器</li><li>取值[]</li><li>遍历 for in</li><li>计算长度、最大/最小值、比较、删除</li><li>连接 + 和 重复 *</li><li>切片</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10.模块中的函数</title>
      <link href="/2019/08/01/10-%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2019/08/01/10-%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>模块是python程序构架的一个核心概念</strong></p><ul><li>模块就好比是工具包，要想使用这个工具包中的工具，就需要导入impor这个模块</li><li>每一个以扩展名py结尾的python源代码文件都是一个模块</li><li>在模块中定义的的全局变量、函数 都是模块能够提供给外界直接使用的工具</li></ul><p><strong>小结：</strong></p><ol><li>可以在一个python文件中定义变量或者函数</li><li>然后在另一个文件中使用impor导入这个模块</li><li>导入之后，就可以使用模块名.变量/模块名.函数的方式，使用这个模块中定义的变量或者函数</li></ol><p><strong>模块可以让编写过的代码方便的被复用</strong><br>模块名也是一个标识符，遵守标识符的规则</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.函数基本使用（1）</title>
      <link href="/2019/08/01/09-%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/"/>
      <url>/2019/08/01/09-%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>注意：定义好函数之后，只表示这个函数封装了一段代码而已，入托不主动调用函数，函数是不会主动执行的<br>** 不能将调用函数放在函数定义上方**否则控制台会提示 NameError：name xxx is not defined</p><h3 id="Pychram-的调试工具"><a href="#Pychram-的调试工具" class="headerlink" title="Pychram 的调试工具"></a>Pychram 的调试工具</h3><ul><li>F8 Step Over 可以单步执行代码，会把函数调用看作是一行代码直接执行</li><li>F7 Step Into 可以单步执行代码，如果是hi函数，会进入函数内部<h3 id="函数文档注释"><a href="#函数文档注释" class="headerlink" title="函数文档注释"></a>函数文档注释</h3></li><li>在开发中，如果希望给函数添加注释，应该在定义函数的下方，使用联系的三对引号</li><li>在连续的三对引号之间编写对函数的说明文字</li><li>在函数调用位置，使用快捷键ctrl + Q 可以查看函数的说明信息</li></ul><p><strong>注意：因为函数体相对独立，函数定义的上方，应该和其他代码（包括注释）保留两个空行</strong></p><h3 id="函数参数的使用"><a href="#函数参数的使用" class="headerlink" title="函数参数的使用"></a>函数参数的使用</h3><ul><li>在函数名的后面的小括号内部填写参数</li><li>多个参数之间使用 , 分隔<h3 id="参数的作用"><a href="#参数的作用" class="headerlink" title="参数的作用"></a>参数的作用</h3></li><li>函数，把具有独立功能的代码块组织为一个小模块，在需要的时候调用</li><li>函数的参数，增加函数的通用性，针对相同的数据处理逻辑，能适应更多的数据</li></ul><ol><li>在函数的内部，把参数当作变量使用，进行需要的数据处理</li><li>函数调用时，按照函数定义的参数顺序把希望在函数内部处理的数据，通过参数传递<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3></li></ol><ul><li>形参：定义函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用</li><li>实参：调用函数时，小括号中的参数，是用来把数据传递到函数内部的<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3></li><li>在程序开发中，有时候，会希望一个函数执行结束之后，告诉调用者一个结果，一边调用者对具体的结果做后续处理</li><li>返回值时函数完成工作后，最后给调用者的一个结果</li><li>在函数中 return 关键字可以返回结果</li><li>调用函数一方，可以使用变量来接受函数的返回结果</li></ul><p><strong>注意：return 之后的代码不会被执行</strong></p><h3 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h3><ul><li>一个函数里面又调用了另一个函数，这就是函数嵌套调用</li><li>如果函数test2中，调用了另一个函数test1<br>那么执行到调用test1函数时，会先把函数test1中的任务都执行完才会回到test2中调用test1的位置，继续执行之后的代码</li></ul><p><strong>提示：工作中针对需求的变化，应该冷静思考，不要轻易修改之前已经完成的，能够正常执行的函数</strong>！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.函数基本使用</title>
      <link href="/2019/08/01/08-%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/01/08-%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>所谓函数，就是把具有独立功能的代码块组织为一个小模块，在需要的时候调用</li><li>函数的使用包含两个步骤：</li></ul><ol><li>定义函数——封装独立的功能</li><li>调用函数——享受封装的成果</li></ol><ul><li>函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的重用<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2>定义函数的格式如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">函数封装的代码</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul><ol><li>def 时英文 define 的缩写</li><li>函数名称应该能够表达函数封装代码的功能，方便后续的调用</li><li>函数名称的命名应该符合标识符的命名规则<br>可以由字母，下划线和数字组成<br>不能以数字开头<br>不能与关键字重名</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.break和continue关键字</title>
      <link href="/2019/07/31/07-break%E5%92%8Ccontinue%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/07/31/07-break%E5%92%8Ccontinue%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><p><strong>break 和 continue是专门在循环中使用的关键字</strong></p><ul><li>break 某一条件满足时，退出循环，不再执行后续重复的代码</li><li>continue 某一条件满足时，不执行后续重复的代码</li></ul><p><strong>break 和 continue 只针对当前所在的循环有效</strong><br><strong>注意：在循环重，如果使用continue这个关键字，在使用关键字之前，需要确认循环的计数是否修改，否则可能会导致死循环。</strong></p><ul><li>\t 在控制台输出一个制表符，协助在输出文本时，垂直方向保持对齐</li><li>\n 在控制台输出一个 换行符</li><li>&quot; 输出一个 双引号 “</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06.while循环的基本使用</title>
      <link href="/2019/07/30/06-while%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/30/06-while%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>循环的作用就是让指定的代码重复执行</li><li>while循环最常用的应用场景就是让执行的代码按照指定的次数重复执行</li><li><strong>注意：</strong>while语句以及缩进部分是一个完整的代码块</li><li>注意：循环结束后，之前定义的计数器条件的数值依然是存在的</li><li>死循环：忘记在循环内部修改</li><li><strong>习惯：除非需要的特殊要求，否则循环的计数都要从0开始</strong><h3 id="循环计算"><a href="#循环计算" class="headerlink" title="循环计算"></a>循环计算</h3></li><li>在程序开发中，通常会遇到利用循环重复计算的需求，遇到这种需求，可以：</li></ul><ol><li>在while上方定义一个变量，用于存放最终计算结果</li><li>在循环体内部，每次循环都用最新的计算结果，更新之前定义的变量</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> while </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.随机数的处理</title>
      <link href="/2019/07/30/05-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/30/05-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>再python中，要使用随机数，首先需要导入随机数的模块——“工具包”</li><li>import random</li><li>导入模块后，可以直接再模块后面敲一个 . 然后按tab键，会提示该模块中包含的所有函数</li><li>random.randint(a, b)  返回[a, b]之间的一个随机数，包含a 和 b</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.逻辑运算</title>
      <link href="/2019/07/29/04-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/"/>
      <url>/2019/07/29/04-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="04-逻辑运算"><a href="#04-逻辑运算" class="headerlink" title="04.逻辑运算"></a>04.逻辑运算</h3><ul><li><p>在程序开发中，通常在判断条件时，会需要同时判断多个条件</p></li><li><p>只有在多个条件都满足，才能够执行后续代码，这个时候需要使用到逻辑运算符</p></li><li><p>逻辑运算符可以把多个条件按照逻辑进行连接，变成更复杂的条件</p></li><li><p>python中的逻辑运算符包括：与and/ 或or/ 非not 三种</p></li><li><p>在开发中，通常希望某个条件不满足时，执行一些代码，可以使用 not</p></li><li><p>如果需要拼接复杂的逻辑计算条件，同样也有可能使用到 not</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.if基础</title>
      <link href="/2019/07/28/03-if%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/28/03-if%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="if-基础"><a href="#if-基础" class="headerlink" title="if 基础"></a>if 基础</h2><p>在python 中，if语句就是用来进行判断的，格式如下</p><pre><code>if 要判断的条件:    条件达成时，要做的事情    ....</code></pre><p><strong>注意：代码的缩进为一个tab键，或者4个空格–建议使用空格</strong></p><ul><li>在python开发中，Tab和空格不要混用</li></ul><p><strong>注意：</strong><br><strong>if语句以及缩进部分是一个完整的代码块</strong></p><h2 id="else"><a href="#else" class="headerlink" title="else"></a>else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件：</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">条件不成立时，要做的事情</span><br></pre></td></tr></table></figure><p>注意：<br>if和else，else语句以及各自的缩进部分共同是一个完整的代码块<br>elif 和else都必须和if联合使用，而不能单独使用</p><ul><li>elif 的应用场景是：同时判断多个条件，所有条件都是平级的</li><li>在开发中，使用if 进行条件判断，如果希望在条件成立的执行语句中再增加条件判断，就可以使用if嵌套</li><li>if的嵌套的应用场景就是：在之前满足条件的前提下，再增加额外的判断</li><li>if 的嵌套的语法格式，除了了缩进之外和之前的没有区别</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> if </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.表示符命名规则</title>
      <link href="/2019/07/28/02-%E8%A1%A8%E7%A4%BA%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
      <url>/2019/07/28/02-%E8%A1%A8%E7%A4%BA%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="02-变量的命名规则"><a href="#02-变量的命名规则" class="headerlink" title="02 变量的命名规则"></a>02 变量的命名规则</h3><ul><li>python中的标识符是区分大小写的</li><li>在定义变量时，为了保证代码格式， = 的左右应该保留一个空格</li><li>在python中，如果变量名需要两个或多个单词组成时，可以安装一下方式命名</li></ul><ol><li>每个单词都使用小写</li><li>单词与单词之间使用 _ 下划线连接</li><li>例如：first_name</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.算数运算符</title>
      <link href="/2019/07/28/01-%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2019/07/28/01-%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="01-算数运算符"><a href="#01-算数运算符" class="headerlink" title="01.算数运算符"></a>01.算数运算符</h2><p>是完成基本的算数运算使用的符号，用来处理四则运算</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10+20=30</td></tr><tr><td>-</td><td>减</td><td></td></tr><tr><td>*</td><td>乘</td><td></td></tr><tr><td>/</td><td>除</td><td></td></tr><tr><td>//</td><td>取整除</td><td>返回除法的整数部分，9//2=4</td></tr><tr><td>%</td><td>取余数</td><td>返回除法的余数9%2=1</td></tr><tr><td>**</td><td>幂</td><td>又称次方，乘方，2**3=8</td></tr><tr><td>- 在python中*运算符还可以用于字符串，计算结果就是字符串重复指定次数的结果</td><td></td><td></td></tr><tr><td><code>“-”*50</code></td><td></td><td></td></tr><tr><td>## 02.算数运算符的优先级</td><td></td><td></td></tr><tr><td>- 和数学中的运算符优先级一致，在python中进行数学计算时，</td><td></td><td></td></tr><tr><td>- 先乘除后加减</td><td></td><td></td></tr><tr><td>- 同级运算符从左至右计算</td><td></td><td></td></tr><tr><td>- 可以使用（）调整计算的优先级</td><td></td><td></td></tr><tr><td><code>**   &gt;  * / % //  &gt;  + -</code></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python注释与代码风格</title>
      <link href="/2019/07/28/python%E6%B3%A8%E9%87%8A%E4%B8%8E%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
      <url>/2019/07/28/python%E6%B3%A8%E9%87%8A%E4%B8%8E%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="什么时候使用注释"><a href="#什么时候使用注释" class="headerlink" title="什么时候使用注释"></a>什么时候使用注释</h4><ol><li>注释不是越多越好，对于一目了然的代码，不需要添加注释</li><li>对于复杂的操作，应该在操作开始之前写上若干行注释</li><li>对于不是一目了然的代码，应该在其行尾添加注释（注释应该至少离开代码2个空格）</li><li>绝不要描述代码，只要知道代码要做什么就可以了</li></ol><h4 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h4><ol><li>使用空格来表示缩进而不要用制表符（Tab）。</li><li>和语法相关的每一层缩进都用4个空格来表示。</li><li>每行的字符数不要超过79个字符，如果表达式因太长而占据了多行，除了首行之外的其余各行都应该在正常的缩进宽度上再加上4个空格。</li><li>函数和类的定义，代码前后都要用两个空行进行分隔。</li><li>在同一个类中，各个方法之间应该用一个空行进行分隔。</li><li>二元运算符的左右两侧应该保留一个空格，而且只要一个空格就好。</li></ol><h4 id="标识符命名"><a href="#标识符命名" class="headerlink" title="标识符命名"></a>标识符命名</h4><ol><li>变量、函数和属性应该使用小写字母来拼写，如果有多个单词就使用下划线进行连接。</li><li>类中受保护的实例属性，应该以一个下划线开头。</li><li>类中私有的实例属性，应该以两个下划线开头。</li><li>类和异常的命名，应该每个单词首字母大写。</li><li>模块级别的常量，应该采用全大写字母，如果有多个单词就用下划线进行连接。</li><li>类的实例方法，应该把第一个参数命名为self以表示对象自身。</li><li>类的类方法，应该把第一个参数命名为cls以表示该类自身。</li></ol><h4 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h4><ol><li>采用内联形式的否定词，而不要把否定词放在整个表达式的前面。例如if a is not b就比if not a is b更容易让人理解。</li><li>不要用检查长度的方式来判断字符串、列表等是否为None或者没有元素，应该用if not x这样的写法来检查它。</li><li>就算if分支、for循环、except异常捕获等中只有一行代码，也不要将代码和if、for、except等写在一起，分开写才会让代码更清晰。</li><li>import语句总是放在文件开头的地方。</li><li>引入模块的时候，from math import sqrt比import math更好。</li><li>如果有多个import语句，应该将其分为三部分，从上到下分别是Python标准模块、第三方模块和自定义模块，每个部分内部应该按照模块名称的字母表顺序来排列。</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件安装</title>
      <link href="/2019/07/28/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2019/07/28/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><ul><li>4.1 通过apt安装/卸载软件</li><li>apt是 advanced packaging tool，是Linux下的一款安装包管理工具</li><li>可以在终端中方便的安装/卸载/更新软件包<br>安装软件<br><code>sudu apt install 软件包</code><br>卸载软件<br><code>sudo apt remove 软件名</code><br>更新已安装的包<br><code>sudu apt upgrade</code></li></ul><p>sudu是获取超级管理员的意思</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux其他命令</title>
      <link href="/2019/07/28/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/28/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><ol><li>查找文件<br>find</li><li>软链接<br>ln</li><li>打包和压缩<br>tar</li><li>软件安装<br>apt-get<h2 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01. 查找文件"></a>01. 查找文件</h2></li></ol><ul><li>find 命令功能非常强大，通常用来在特定的目录下搜索符合条件的文件<br><code>find [路径] -name &quot;*.py&quot;             作用：查找指定路径下扩展名时 .py 的文件，包括子目录</code></li><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用find命令时同时可用</li></ul><ol><li>搜索桌面目录下，文件名包含1 的文件<br><code>find -name “*1*”</code></li><li>搜索桌面目录下，所有以.txt为扩展名的文件<br><code>find -name &quot;*.txt&quot;</code></li><li>搜索桌面目录下，以数字1开头的文件<br><code>find -name &quot;1*&quot;</code><h2 id="2-软连接"><a href="#2-软连接" class="headerlink" title="2.软连接"></a>2.软连接</h2><code>ln -s 被链接的源文件 链接文件            作用：建立文件的软链接，用通俗的方式讲类似于Windows下的快捷方式</code></li></ol><p><strong>注意：</strong></p><ul><li>1，没有 -s 选项建立的是一个硬链接文件<br>两个文件占用大小相同的硬盘空间，工作中几乎不会建立文件的硬链接</li><li>2，源文件要<strong>使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ul><p><strong>【例子】</strong><br>1，将桌面目录下的01.py 移动到 demo/b/c 目录下<br><code>mv 01.py demo/b/c</code><br>2，在桌面目录下新建 01.py 的软链接 FirstPython<br>分别使用相对路径和绝对路径建立FirstPython<br>相对路径<code>ln -s demo/b/c/01.py 01_xiangdui</code><br>cat 显示文件内容<br>绝对路径<code>ln-s /home/chen/Desktop/demo/b/c/01.py 01_juedui</code><br>3，将FirstPython 移动到demo目录下，对比使用相对路径和绝对路径的区别</p><p>在Linux中，文件名和文件数据时分开存储的</p><h2 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03.打包压缩"></a>03.打包压缩</h2><ul><li>打包压缩时日常工作中备份文件的一种方式</li><li>在不同的操作系统中，常用的打包压缩方式是不同的</li></ul><ol><li>windows中常用rar</li><li>Mac中常用zip</li><li>Linux中常用tar.gz<h3 id="3-1-打包-解包"><a href="#3-1-打包-解包" class="headerlink" title="3.1 打包/解包"></a>3.1 打包/解包</h3></li></ol><ul><li>tar是Linux中最常用的备份工具，此命令可以把一系列文件打包到一个大文件中，也可以把一个打包的大文件恢复成以系列文件</li><li>tar 的命令格式如下：<br>打包文件<br><code>tar -cvf 打包文件.rar 被打包的文件/路径...</code><br>解包文件<br><code>tar -xvf 打包文件.tar</code></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档接档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f后面一定是.tar 文件，所以必须放选项最好</td></tr><tr><td><strong>注意：</strong>f 选项必须放在最后，其他选项顺序可以随意</td><td></td></tr></tbody></table><p><strong>【例子】</strong></p><ol><li>删除桌面下的所有内容<br><code>rm -r *</code></li><li>在桌面下新建3个空白文件 01.py，02.py 03.py<br><code>touch 01.py</code></li><li>将这三个文件夹打一个 py.tar的包<br><code>tar -cvf py.tar 01.py 02.py 03.py</code></li><li>新建 tar 目录，并且将 py.tar 移动到tar 目录下<br><code>mkdir tar</code><br><code>mv py.tar tar</code></li><li>解包 py.tar<br><code>tar -xvf py.tar</code><h3 id="3-2-压缩-解压缩"><a href="#3-2-压缩-解压缩" class="headerlink" title="3.2 压缩/解压缩"></a>3.2 压缩/解压缩</h3><h4 id="1）gzip"><a href="#1）gzip" class="headerlink" title="1）gzip"></a><strong>1）gzip</strong></h4></li></ol><ul><li>tar与gzip 命令结合可以实现文件打包和压缩</li></ul><ol><li>tar只负责打包文件，但不压缩</li><li>用gzip 压缩tar打包后的文件，其扩展名一般用 xxx.tar.gz</li></ol><p><em>在Linux中，最常见的压缩文件格式就是 xxx.tar.gz</em></p><ul><li>在tar 命令中有一个选项 -z 可以调用 gzip ，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：<br>压缩文件<br><code>tar -zxcf 打包文件.tar.gz 被压缩的文件/路径...</code><br>解压缩文件<br><code>tar -zxvf 打包文件.tar.gz</code><br>解压缩到指定路径<br><code>tar -zxvf 打包文件.tar.gz -C 目标路径</code><br><code>-C         含义：解压缩到指定目录，注意：要解压缩的目录必须存在</code><h4 id="2）bzip2-two"><a href="#2）bzip2-two" class="headerlink" title="2）bzip2(two)"></a><strong>2）bzip2(two)</strong></h4></li><li>tar 与bzip2 命令结合可以使用实现文件 打包和压缩 （用法和 gzip 一样）</li></ul><ol><li>tar 只负责打包文件，但不压缩</li><li>用 bzip2 压缩tar 打包后的文件，其扩展名一般用 xxx.tar.bz2</li></ol><ul><li>在tar 命令中有一个选项 -j 可以调用 bzip2 ，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：<br>压缩文件<br><code>tar -jcvf 打包文件.tar.bz2 被压缩的文件/路径/...</code><br>解压缩文件<br><code>tar -jxvf 打包文件.tar.bz2</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统信息相关命令</title>
      <link href="/2019/07/28/Linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/28/Linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h1><h2 id="01，时间和日期"><a href="#01，时间和日期" class="headerlink" title="01，时间和日期"></a>01，时间和日期</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间</td></tr><tr><td>02</td><td>cal</td><td>查看系统日历</td></tr></tbody></table><h2 id="02，磁盘信息"><a href="#02，磁盘信息" class="headerlink" title="02，磁盘信息"></a>02，磁盘信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td>disk free 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td>disk usage 显示目录下的文件大小</td></tr><tr><td><strong>选项说明</strong></td><td></td><td></td></tr><tr><td><code>-h   以人性化的方式显示文件大小</code></td><td></td><td></td></tr><tr><td>## 03，进程信息</td><td></td><td></td></tr><tr><td>- 所谓进程，通俗地说就是当前正在执行的一个程序</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps aux</td><td>process status 查看进程的详细状况</td></tr><tr><td>02</td><td>top</td><td>动态显示运行中的程序并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，-9表示强行终止</td></tr><tr><td>ps <strong>默认只会显示当前用户通过终端启动的应用程序</strong></td><td></td><td></td></tr><tr><td>- ps 选项功能说明</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有程序，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程</td></tr><tr><td><strong>提示：使用kill 命令时，最好只终止由当前用户开启的进程，而不要终止root身份开启的进程，否则可能导致系统崩溃</strong></td><td></td></tr><tr><td>- 要退出top 可以直接输入 q</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-08-scp作用以及命令格式</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-08-scp%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-08-scp%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="3-2-scp（掌握）"><a href="#3-2-scp（掌握）" class="headerlink" title="3.2 scp（掌握）"></a>3.2 scp（掌握）</h2><ul><li>scp就是 secure copy，是一个在Linux下用来进行远程拷贝文件的命令</li><li>它的格式地址与ssh基本相同，需要注意的是，在指定端口时，用的是大写的 -P 而不是小写的</li></ul><ol><li>把本地目录下的01.py 文件 复制到远程 家 目录下的 Desktop/01.py </li></ol><p><strong>注意：</strong>“：”后面的路径如果不是绝对路径，则以用户的家目录为参考路径<br><code>scp -P port 01.py user@remote:Decktop/01.py</code></p><ol start="2"><li>把远程目录 家目录下的 Desktop/01.py 文件 复制到 本地目录下的01.py<br><code>scp -P port user@remote:Dedktop/01.py 01.py .</code><br>加上 -r 选项可以传送文件夹</li><li>把当前目录下的 demo 文件夹复制到远程家目录下单 Desktop<br><code>scp -r demo user@remote:Desktop</code></li><li>把远程家目录下的Desktop 复制到 当前目录下的 demo 文件夹<br><code>scp -r user@remote:Desktop demo</code></li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则scp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程SSH服务器的端口不是22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>scp 这个终端命令只能在Linux 或者UNIX系统下使用</li><li>如果在Windows系统中，可以安装PuTTY，使用pscp命令工具行或者安装FileZilla 使用FTP进行文件传输（因是ftp，故端口号设置为21）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-07-ssh命令格式介绍和演练目标确定</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-07-ssh%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%BB%83%E7%9B%AE%E6%A0%87%E7%A1%AE%E5%AE%9A/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-07-ssh%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%BB%83%E7%9B%AE%E6%A0%87%E7%A1%AE%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="2，SSH客户端的简单使用"><a href="#2，SSH客户端的简单使用" class="headerlink" title="2，SSH客户端的简单使用"></a>2，SSH客户端的简单使用</h3><p><code>ssh [-p port] user@remote</code></p><ul><li>user 是在远程机器上的用户名，如果不指定的话，为当前用户</li><li>remote 是远程机器的地址，可以是IP/域名， 或者是后面会提到的别名</li><li>port是SSH　Server监听的端口，如果不指定，就为默认值２２</li></ul><p><strong>提示：</strong></p><ul><li>使用 exit 退出当前用户的登陆</li></ul><p><strong>注意：</strong></p><ul><li>ssh这个终端命令只能在 Linux 或者UNIX系统下使用</li><li>如果在windows系统中，可以安装 PuTTY 或者 XShell 客户端软件即可</li></ul><p><strong>提示：</strong></p><ul><li>在工作中，SSH服务器的端口号很有可能不是22，如果遇到这种情况就要使用 <code>-p</code> 选项；指定正确的端口号，否则无法正常连接到服务器</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-06-域名和端口的概念</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-06-%E5%9F%9F%E5%90%8D%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-06-%E5%9F%9F%E5%90%8D%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="1-域名和端口"><a href="#1-域名和端口" class="headerlink" title="1. 域名和端口"></a>1. 域名和端口</h3><p><strong>域名</strong></p><ul><li>由一串用点分隔的名字组成，例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>是IP地址的别名，方便用户记忆</li></ul><p><strong>端口号</strong></p><ul><li>IP地址：通过IP地址找到网络上的计算机</li><li>端口号：通过端口号可以找到计算机上的应用程序</li></ul><ol><li>SSH服务器的默认端口号是22，如果是默认端口号，在连接的时候，可以省略</li></ol><ul><li>常见的服务端口号列表</li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH服务器</td><td>22</td></tr><tr><td>02</td><td>Web服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP服务器</td><td>21</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-04-SSH工作方式简介</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-05-SSH%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-05-SSH%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="03-远程登陆和复制文件"><a href="#03-远程登陆和复制文件" class="headerlink" title="03.远程登陆和复制文件"></a>03.远程登陆和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh用户名@ip</td><td>secure shell</td><td>关机/从新启动</td></tr><tr><td>02</td><td>scp用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h2 id="3-1-ssh基础（重点）"><a href="#3-1-ssh基础（重点）" class="headerlink" title="3.1 ssh基础（重点）"></a>3.1 ssh基础（重点）</h2><ul><li>在Linux中SSH是非常常用的工具，通过SSH客户端我们可以连接到运行了SSH服务器的远程机器上</li></ul><ol><li>数据传输是加密的，可以防止信息泄露</li><li>数据时输是压缩的，可以提高传输速度</li></ol><ul><li>SSH客户端是一种使用 Secure Shell（SSH）协议连接到远程计算机的软件程序</li><li>SSH是目前较可靠，专为远程登陆会话和其他网络服务提供安全性的协议</li></ul><ol><li>利用SSH协议可以有效防止远程管理过程中的信息泄露</li><li>通过SSH协议可以对所有数据传输进行加密，也能够防止DNS欺骗和IP欺骗</li></ol><ul><li>SSH的另一项优点是可以经过压缩的，所以可以加快传输的速度</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-05-ping测试网络连接</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-04-ping%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-04-ping%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 ping</h2><p>检测到目标主机是否连接正常<br><code>ping IP地址</code><br>检测本地网卡工作正常<br><code>ping 127.0.0.1</code></p><ul><li>ping 一般用于检测当前计算机到目标计算机之间的网络是否通畅，数值越大，速度越慢</li><li>ping一下计算机x，看他是否开着，原理：网络上的机器都有唯一确定的IP地址，我们给目标IP地址发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</li></ul><p><strong>提示：</strong>在Linux中，想要终止一个终端程序的执行，绝大多数都可以用CTRL+ C</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-03-ifconfig查询网卡信息</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-03-ifconfig%E6%9F%A5%E8%AF%A2%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-03-ifconfig%E6%9F%A5%E8%AF%A2%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2 ifconfig"></a>2.2 ifconfig</h2><ul><li>ifconfig 可以查看/配置计算机当前网卡配置信息</li></ul><ol><li>查看网卡配置信息<br><code>ifconfig</code></li><li>查看网卡对应的IP地址<br><code>ifconfig | grep inet</code></li></ol><p><strong>提示：</strong>一台计算机中有可能会有一个物理网卡和多个虚拟网卡，在Linux中物理网卡的名字通常以ensXX表示</p><ul><li>127.0.0.1 被称为本地回环/环回地址， 一般用来测试本机网卡是否正常</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-02-网卡和IP地址的概念</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-02-%E7%BD%91%E5%8D%A1%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-02-%E7%BD%91%E5%8D%A1%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="02，查看或配置网卡信息"><a href="#02，查看或配置网卡信息" class="headerlink" title="02，查看或配置网卡信息"></a>02，查看或配置网卡信息</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>confi</td><td>查看/配置</td></tr><tr><td>02</td><td>ping ip地中</td><td>ping</td><td>检测目标ip地址的连接是否正常</td></tr><tr><td>## 2.1 网卡和IP地址</td><td></td><td></td><td></td></tr><tr><td><strong>网卡</strong></td><td></td><td></td><td></td></tr><tr><td>- 网卡是一个专门负责网络通讯的硬件设备</td><td></td><td></td><td></td></tr><tr><td>- IP地址是设置在网卡上的地址信息</td><td></td><td></td><td></td></tr><tr><td>我们可以把电脑比作电话，网卡相当于SIM卡，IP地址相当于电话号码</td><td></td><td></td><td></td></tr><tr><td><strong>IP地址</strong></td><td></td><td></td><td></td></tr><tr><td>- 每台联网的电脑上都有IP地址，是保证电脑之间正常通讯的重要设置</td><td></td><td></td><td></td></tr><tr><td><strong>注意：</strong>每台电脑的IP地址不能相同，否则会出现IP地址冲突，并且没有办法正常通讯</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 远程管理命令-01-关机和重启</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-01-%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-01-%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机/重新启动</td></tr></tbody></table><p>1.1 shutdown</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr><tr><td><strong>提示：</strong></td><td></td></tr><tr><td>- 不指定选项和参数，默认表示一分钟之后关闭电脑</td><td></td></tr><tr><td>- 远程维护服务器时，最好不要关闭系统，而应该重启系统</td><td></td></tr><tr><td><strong>常用命令示例</strong></td><td></td></tr><tr><td>1. 重新启动系统，其中 now 表示现在</td><td></td></tr><tr><td><code>shutdown now</code></td><td></td></tr><tr><td>2. 立刻关机，其中now表示现在</td><td></td></tr><tr><td><code>shutdown now</code></td><td></td></tr><tr><td>3. 系统在今天的 20：35 会关机</td><td></td></tr><tr><td><code>shutdown 20：35</code></td><td></td></tr><tr><td>4. 取消之前指定的关机计划</td><td></td></tr><tr><td><code>shutdown -c</code></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2019/07/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p><strong>Linux是区分大小写的</strong></p><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>cd[目录名]</td><td>change directory</td><td>切换文件夹（cd xxx）</td></tr><tr><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>touch[文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>mkdir[目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>rm[文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li>ctrl + shift + =    放大终端窗口的字体显示</li><li>ctrl + -    缩小终端窗口的字体显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端命令格式</title>
      <link href="/2019/07/26/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/07/26/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux终端命令格式"><a href="#Linux终端命令格式" class="headerlink" title="Linux终端命令格式"></a>Linux终端命令格式</h2><h3 id="1，终端命令格式"><a href="#1，终端命令格式" class="headerlink" title="1，终端命令格式"></a>1，终端命令格式</h3><p>command [-options] [parameter]<br><strong>说明：</strong></p><ul><li>command：命令名，相应功能的英文单词或单词的缩写</li><li>[-options]：选项，可用来对命令进行控制，也可以省略</li><li>parameter：传给命令的参数，可以是零个，一个，或者多个</li></ul><h3 id="2，查阅命令帮助信息"><a href="#2，查阅命令帮助信息" class="headerlink" title="2，查阅命令帮助信息"></a>2，查阅命令帮助信息</h3><p>–help<br><code>command --help</code><br><strong>说明：</strong></p><ul><li>显示command命令的帮助信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql修改表(2)</title>
      <link href="/2019/07/26/MySql%E4%BF%AE%E6%94%B9%E8%A1%A8/"/>
      <url>/2019/07/26/MySql%E4%BF%AE%E6%94%B9%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql修改表"><a href="#MySql修改表" class="headerlink" title="MySql修改表"></a>MySql修改表</h2><p>对表的修改失败要用rollback（）方法进行回滚<br>execute()中要用元组，mysql传递一个参数的时候，可以不用逗号(103)或者(103,)都可以，在sqlite中逗号不能少<br>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改有rollback</span></span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 创建与数据库的连接</span></span><br><span class="line">    con = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line">    <span class="comment"># 创建游标对象cursor</span></span><br><span class="line">    cursor = con.cursor()</span><br><span class="line">    <span class="comment"># 写修改的sql</span></span><br><span class="line">    sql = <span class="string">'update student set sname = %s where sno = %s'</span></span><br><span class="line">    cursor.execute(sql, (<span class="string">'哈哈'</span>, 100))     <span class="comment"># 要用元组，</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'修改失败'</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure><h2 id="MySql删除表"><a href="#MySql删除表" class="headerlink" title="MySql删除表"></a>MySql删除表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 修改有rollback</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    # 创建与数据库的连接</span><br><span class="line">    con = pymysql.connect(host=&apos;localhost&apos;, user=&apos;root&apos;, password=&apos;root&apos;, database=&apos;testmysql&apos;, port=3306)</span><br><span class="line">    # 创建游标对象cursor</span><br><span class="line">    cursor = con.cursor()</span><br><span class="line">    # 写修改的sql</span><br><span class="line">    sql = &apos;update student set sname = %s where sno = %s&apos;</span><br><span class="line">    cursor.execute(sql, (&apos;哈哈&apos;, 100))     # 要用元组，</span><br><span class="line">    con.commit（）</span><br><span class="line">    print(&apos;修改成功&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(&apos;修改失败&apos;)</span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    # 关闭数据库连接</span><br><span class="line">    con.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql查询数据(4)</title>
      <link href="/2019/07/26/Mysql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/Mysql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>  <strong>【实例】</strong><br>  获取要用元组的下标索引，与插入不同的是要处理结果集</p><pre><code class="bash">import pymysql<span class="comment"># 创建连接</span>con = pymysql.connect(host=<span class="string">'localhost'</span>, password=<span class="string">'root'</span>, user=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)<span class="comment"># 创建事务</span>cur = con.cursor()<span class="comment"># 编写查询的sql</span>sql = <span class="string">'select * from student'</span><span class="comment"># 执行sql</span>try:    cur.execute(sql)    <span class="comment"># 处理结果集</span>    stu = cur.fetchone()    <span class="built_in">print</span>(stu)    students = cur.fetchall()    <span class="keyword">for</span> student <span class="keyword">in</span> students:    <span class="comment"># 获取要用下标，索引从0开始</span>        sno = student[0]        sname = student[1]        sex = student[2]        age = student[3]        score = student[4]        <span class="built_in">print</span>(<span class="string">'sno:'</span>, sno, <span class="string">'sname:'</span>, sname, <span class="string">'age:'</span>, age, <span class="string">'sex:'</span>, sex, <span class="string">'age:'</span>, age,  <span class="string">'score:'</span>, score)except Exception as e:    <span class="built_in">print</span>(e)    <span class="built_in">print</span>(<span class="string">'查询失败'</span>)finally:    cur.close()    con.close()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql插入数据(3)</title>
      <link href="/2019/07/26/MySql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/MySql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"><span class="comment"># 创建与数据的连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">'localhost'</span>, password=<span class="string">'root'</span>, user=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 写插入数据库的sql</span></span><br><span class="line">sql = <span class="string">'insert into student(sno, sname, sex, age, score) values(%s, %s, %s, %s, %s)'</span>      <span class="comment"># s要小写，不然会报unsupported format character 'S' (0x53) at index 72</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行sql插入一条数据</span></span><br><span class="line">    <span class="comment"># cur.execute(sql, (1100, '张三', '男', 33, 33.3))</span></span><br><span class="line">    <span class="comment"># 插入多条数据</span></span><br><span class="line">    args = [(102, <span class="string">'张2'</span>, <span class="string">'男'</span>, 33, 33.3), (103, <span class="string">'张4'</span>, <span class="string">'男'</span>, 33, 33.3), (104, <span class="string">'张5'</span>, <span class="string">'男'</span>, 33, 33.3)]     <span class="comment"># 插入多条数据要用executemany</span></span><br><span class="line">    cur.executemany(sql, args)</span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    con.close()</span><br><span class="line">    cur.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql创建表(1)</title>
      <link href="/2019/07/26/MySql%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
      <url>/2019/07/26/MySql%E5%88%9B%E5%BB%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql创建表"><a href="#MySql创建表" class="headerlink" title="MySql创建表"></a>MySql创建表</h2><p>首先要在navicat中连接数据库，创建一个testtmysql的数据库<br>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 创建与数据库的连接</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line">    <span class="comment"># 创建游标对象cursor</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="comment"># 使用execute()方法执行sql，如果表存在则删除</span></span><br><span class="line">    cursor.execute(<span class="string">'drop table if EXISTS student'</span>)</span><br><span class="line">    <span class="comment"># 创建表的sql</span></span><br><span class="line">    sql = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        create table student(</span></span><br><span class="line"><span class="string">        sno int(8) primary key auto_increment,</span></span><br><span class="line"><span class="string">        sname varchar(30) not null,</span></span><br><span class="line"><span class="string">        sex varchar(5) ,</span></span><br><span class="line"><span class="string">        age int(2),</span></span><br><span class="line"><span class="string">        score float(3,1)</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建成功"</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'创建表失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    db.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure><p>![]<br>(<a href="https://github.com/gxnucgb/python/blob/master/MYSq%E5%88%9B%E5%BB%BA%E8%A1%A8.png">https://github.com/gxnucgb/python/blob/master/MYSq%E5%88%9B%E5%BB%BA%E8%A1%A8.png</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3学习</title>
      <link href="/2019/07/25/sqlite3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/07/25/sqlite3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1，操作流程"><a href="#1，操作流程" class="headerlink" title="1，操作流程"></a>1，操作流程</h2><p>（1）先在文件夹创建出一个.db文件<br>  （2）导入相关库或模块（SQLite3)<br>  （3）使用connect()连接数据库并获取数据库对象。他提供了以下方法：<br>  .cursor() 方法来创建一个游标对象<br>  .commit() 方法来处理事务提交<br>  .rollback() 方法来处理事务回滚<br>  .close() 方法来关闭一个数据库连接<br>  （4）使用con.cursor() 获取游标对象<br>  （5）使用游标对象的方法execute()、executemany()、fetchall() 等来操作数据库，实现数据库插入、修改和删除操作，并查询获取显示相关的记录。在Python程序中，连接函数sqlite3.connert()有如下两个常用的参数：<br>database:表示要访问的数据库名。<br>timeout():表示访问数据的超时设定。<br>  （6）使用close()关闭游标对象和数据库连接。数据库操作完成之后，必须及时调用其close()方法关闭数据库连接，这样做的目的是减轻数据服务器的压力。<br>  （7）他的的不同有sql语句，执行的时候的参数</p><h2 id="2，使用SQLite3创建表"><a href="#2，使用SQLite3创建表" class="headerlink" title="2，使用SQLite3创建表"></a>2，使用SQLite3创建表</h2><p>使用sqlite3模块的connect方法来创建/打开数据库，需要指定数据库路径，不存在则创建一个新的数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">'e:/sqlitedb/first.db'</span>)   <span class="comment">#路径的那个斜杠要反过来写，文件不存在则创建文件</span></span><br></pre></td></tr></table></figure><p><strong><em>【实例】</em></strong>使用sqlite3创建表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor(游标)对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">'create table Student (id int(10) primary key, \</span></span><br><span class="line"><span class="string">                                name char(20) not null \</span></span><br><span class="line"><span class="string">                              )'</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建成功"</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建失败"</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="2，使用SQLite3插入数据"><a href="#2，使用SQLite3插入数据" class="headerlink" title="2，使用SQLite3插入数据"></a>2，使用SQLite3插入数据</h2><p>调用游标对象的execute执行插入的sql，使用executemany()执行多条sql语句，使用executmany()比循环使用execu()执行多条sql语句效率高<br><strong><em>【实例】</em></strong>使用sqlite3在表中插入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 在硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 执行sql创建表</span></span><br><span class="line">sql = <span class="string">'insert into Student(id, name) values(?, ?)'</span>      <span class="comment"># 问号是用来占位的</span></span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql, (112, <span class="string">'小潘'</span>))       <span class="comment"># 用元组来写数据</span></span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    插入多条数据</span></span><br><span class="line"><span class="string">    cur.executemany(sql, [(100, "小陈"), (101, "小李")])    #执行多条插入的时候，要用列表＋元组来存，插入重复数据会报错</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"插入失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="2，使用SQLite3查询数据"><a href="#2，使用SQLite3查询数据" class="headerlink" title="2，使用SQLite3查询数据"></a>2，使用SQLite3查询数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3查询表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">'select * from Student'</span></span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 与插入不同的是要获取结果集</span></span><br><span class="line">    <span class="comment"># 获取一条结果</span></span><br><span class="line">    stu1 = cur.fetchone()</span><br><span class="line">    <span class="built_in">print</span>(stu1)</span><br><span class="line">    stu_all = cur.fetchall()</span><br><span class="line">    <span class="comment"># print(stu_all)</span></span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> stu_all:</span><br><span class="line">        <span class="built_in">print</span>(stu)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'查询所有数据失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="3，使用SQLite3修改数据"><a href="#3，使用SQLite3修改数据" class="headerlink" title="3，使用SQLite3修改数据"></a>3，使用SQLite3修改数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3修改表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 写修改语句</span></span><br><span class="line">sql = <span class="string">'update Student set name=? where id = ?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">try:</span><br><span class="line">     <span class="comment"># 执行修改</span></span><br><span class="line">     cur.execute(sql, (<span class="string">"hahah"</span>, 112))</span><br><span class="line">     <span class="comment"># 提交事务</span></span><br><span class="line">     con.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"修改失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="3，使用SQLite3删除数据"><a href="#3，使用SQLite3删除数据" class="headerlink" title="3，使用SQLite3删除数据"></a>3，使用SQLite3删除数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3删除表中数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写删除语句</span></span><br><span class="line">sqldel = <span class="string">'delete from Student where id =?'</span></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行删除</span></span><br><span class="line">    cur.execute(sqldel, (112,))       <span class="comment"># 必须是元组类型，所以（112, )逗号不能少</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"修改失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上面的实例中，首先定义查询在上述实例代码中，首先定义查询所有数据、插入数据、修改数据、删除数据的方法。然后，定义主方法中依次建立连接，获取连接的cursor，通过cursor的execute()等方法来执行SQL语句，调用插入记录、更加记录、删除记录的方法。<br>  特别注意：execute参数中的是sql语句和元组！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/24/hello-world/"/>
      <url>/2019/07/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>坦克项目小学习1</title>
      <link href="/2019/07/24/%E5%9D%A6%E5%85%8B%E9%A1%B9%E7%9B%AE%E5%B0%8F%E5%AD%A6%E4%B9%A01/"/>
      <url>/2019/07/24/%E5%9D%A6%E5%85%8B%E9%A1%B9%E7%9B%AE%E5%B0%8F%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h4 id="坦克小项目学习"><a href="#坦克小项目学习" class="headerlink" title="坦克小项目学习"></a>坦克小项目学习</h4><h5 id="1，分析。"><a href="#1，分析。" class="headerlink" title="1，分析。"></a>1，分析。</h5><p>在写一个项目代码之前，应该要对项目进行分析，分析他可以分为多少个模块，进而得到他应该有多少个类，分析出他的主类是什么。  </p><h5 id="2，再分析。"><a href="#2，再分析。" class="headerlink" title="2，再分析。"></a>2，再分析。</h5><p>  在得到有多少个类之后，对类进行分析，分析他具有什么方法，具有什么属性（相似的类可以使用继承。  </p><h5 id="3，建框架。"><a href="#3，建框架。" class="headerlink" title="3，建框架。"></a>3，建框架。</h5><p>在pycharm创建的项目中，先写出这些类还有方法，构建出一个项目框架。  </p><h5 id="4，写主窗口。"><a href="#4，写主窗口。" class="headerlink" title="4，写主窗口。"></a>4，写主窗口。</h5><p>写出显示主窗口，可到官网<a href="http://www.pygame.org学习查看文档。" target="_blank" rel="noopener">www.pygame.org学习查看文档。</a>   </p><h6 id="1，导入pygame"><a href="#1，导入pygame" class="headerlink" title="1，导入pygame"></a>1，导入pygame</h6><h6 id="2，显示一个窗口先要调用init方法初始化一个窗口"><a href="#2，显示一个窗口先要调用init方法初始化一个窗口" class="headerlink" title="2，显示一个窗口先要调用init方法初始化一个窗口"></a>2，显示一个窗口先要调用init方法初始化一个窗口</h6><p>  set_mode(resolution = (0, 0), flags = 0, depth = 0)   -&gt;suface，创建一个显示surface，传入的参数是resolution参数是一对表示宽度和高度的数字用（元组），flags参数是其他选项的集合，depth表示用于颜色的位数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Thanks</title>
      <link href="/2019/07/24/Thanks/"/>
      <url>/2019/07/24/Thanks/</url>
      
        <content type="html"><![CDATA[<h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="测试测试！！！"><a href="#测试测试！！！" class="headerlink" title="测试测试！！！"></a>测试测试！！！</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
