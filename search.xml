<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux远程管理命令-9 scp作用以及命令格式</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-12-scp%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-12-scp%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="3-2-scp（掌握）"><a href="#3-2-scp（掌握）" class="headerlink" title="3.2 scp（掌握）"></a>3.2 scp（掌握）</h2><ul><li>scp就是 secure copy，是一个在Linux下用来进行远程拷贝文件的命令</li><li>它的格式地址与ssh基本相同，需要注意的是，在指定端口时，用的是大写的 -P 而不是小写的</li></ul><ol><li>把本地目录下的01.py 文件 复制到远程 家 目录下的 Desktop/01.py </li></ol><p><strong>注意：</strong>“：”后面的路径如果不是绝对路径，则以用户的家目录为参考路径<br><code>scp -P port 01.py user@remote:Decktop/01.py</code></p><ol start="2"><li>把远程目录 家目录下的 Desktop/01.py 文件 复制到 本地目录下的01.py<br><code>scp -P port user@remote:Dedktop/01.py 01.py .</code><br>加上 -r 选项可以传送文件夹</li><li>把当前目录下的 demo 文件夹复制到远程家目录下单 Desktop<br><code>scp -r demo user@remote:Desktop</code></li><li>把远程家目录下的Desktop 复制到 当前目录下的 demo 文件夹<br><code>scp -r user@remote:Desktop demo</code></li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则scp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程SSH服务器的端口不是22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>scp 这个终端命令只能在Linux 或者UNIX系统下使用</li><li>如果在Windows系统中，可以安装PuTTY，使用pscp命令工具行或者安装FileZilla 使用FTP进行文件传输（因是ftp，故端口号设置为21）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-08 ssh命令格式介绍和演练目标确定</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-08-ssh%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%BB%83%E7%9B%AE%E6%A0%87%E7%A1%AE%E5%AE%9A/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-08-ssh%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%BC%94%E7%BB%83%E7%9B%AE%E6%A0%87%E7%A1%AE%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="2，SSH客户端的简单使用"><a href="#2，SSH客户端的简单使用" class="headerlink" title="2，SSH客户端的简单使用"></a>2，SSH客户端的简单使用</h3><p><code>ssh [-p port] user@remote</code></p><ul><li>user 是在远程机器上的用户名，如果不指定的话，为当前用户</li><li>remote 是远程机器的地址，可以是IP/域名， 或者是后面会提到的别名</li><li>port是SSH　Server监听的端口，如果不指定，就为默认值２２</li></ul><p><strong>提示：</strong></p><ul><li>使用 exit 退出当前用户的登陆</li></ul><p><strong>注意：</strong></p><ul><li>ssh这个终端命令只能在 Linux 或者UNIX系统下使用</li><li>如果在windows系统中，可以安装 PuTTY 或者 XShell 客户端软件即可</li></ul><p><strong>提示：</strong></p><ul><li>在工作中，SSH服务器的端口号很有可能不是22，如果遇到这种情况就要使用 <code>-p</code> 选项；指定正确的端口号，否则无法正常连接到服务器</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-07 域名和端口的概念</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-07-%E5%9F%9F%E5%90%8D%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-07-%E5%9F%9F%E5%90%8D%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="1-域名和端口"><a href="#1-域名和端口" class="headerlink" title="1. 域名和端口"></a>1. 域名和端口</h3><p><strong>域名</strong></p><ul><li>由一串用点分隔的名字组成，例如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li><li>是IP地址的别名，方便用户记忆</li></ul><p><strong>端口号</strong></p><ul><li>IP地址：通过IP地址找到网络上的计算机</li><li>端口号：通过端口号可以找到计算机上的应用程序</li></ul><ol><li>SSH服务器的默认端口号是22，如果是默认端口号，在连接的时候，可以省略</li></ol><ul><li>常见的服务端口号列表</li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH服务器</td><td>22</td></tr><tr><td>02</td><td>Web服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP服务器</td><td>21</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-06 SSH工作方式简介</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-06-SSH%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-06-SSH%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="03-远程登陆和复制文件"><a href="#03-远程登陆和复制文件" class="headerlink" title="03.远程登陆和复制文件"></a>03.远程登陆和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh用户名@ip</td><td>secure shell</td><td>关机/从新启动</td></tr><tr><td>02</td><td>scp用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h2 id="3-1-ssh基础（重点）"><a href="#3-1-ssh基础（重点）" class="headerlink" title="3.1 ssh基础（重点）"></a>3.1 ssh基础（重点）</h2><ul><li>在Linux中SSH是非常常用的工具，通过SSH客户端我们可以连接到运行了SSH服务器的远程机器上</li></ul><ol><li>数据传输是加密的，可以防止信息泄露</li><li>数据时输是压缩的，可以提高传输速度</li></ol><ul><li>SSH客户端是一种使用 Secure Shell（SSH）协议连接到远程计算机的软件程序</li><li>SSH是目前较可靠，专为远程登陆会话和其他网络服务提供安全性的协议</li></ul><ol><li>利用SSH协议可以有效防止远程管理过程中的信息泄露</li><li>通过SSH协议可以对所有数据传输进行加密，也能够防止DNS欺骗和IP欺骗</li></ol><ul><li>SSH的另一项优点是可以经过压缩的，所以可以加快传输的速度</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-05 ping测试网络连接</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-05-ping%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-05-ping%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 ping</h2><p>检测到目标主机是否连接正常<br><code>ping IP地址</code><br>检测本地网卡工作正常<br><code>ping 127.0.0.1</code></p><ul><li>ping 一般用于检测当前计算机到目标计算机之间的网络是否通畅，数值越大，速度越慢</li><li>ping一下计算机x，看他是否开着，原理：网络上的机器都有唯一确定的IP地址，我们给目标IP地址发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</li></ul><p><strong>提示：</strong>在Linux中，想要终止一个终端程序的执行，绝大多数都可以用CTRL+ C</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-04 ifconfig查询网卡信息</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-04-ifconfig%E6%9F%A5%E8%AF%A2%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-04-ifconfig%E6%9F%A5%E8%AF%A2%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2 ifconfig"></a>2.2 ifconfig</h2><ul><li>ifconfig 可以查看/配置计算机当前网卡配置信息</li></ul><ol><li>查看网卡配置信息<br><code>ifconfig</code></li><li>查看网卡对应的IP地址<br><code>ifconfig | grep inet</code></li></ol><p><strong>提示：</strong>一台计算机中有可能会有一个物理网卡和多个虚拟网卡，在Linux中物理网卡的名字通常以ensXX表示</p><ul><li>127.0.0.1 被称为本地回环/环回地址， 一般用来测试本机网卡是否正常</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-03 ifconfig和ping作用的介绍</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-03-ifconfig%E5%92%8Cping%E4%BD%9C%E7%94%A8%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-03-ifconfig%E5%92%8Cping%E4%BD%9C%E7%94%A8%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理命令-02网卡和IP地址的概念</title>
      <link href="/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-02%E7%BD%91%E5%8D%A1%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/07/27/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-02%E7%BD%91%E5%8D%A1%E5%92%8CIP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="02，查看或配置网卡信息"><a href="#02，查看或配置网卡信息" class="headerlink" title="02，查看或配置网卡信息"></a>02，查看或配置网卡信息</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>confi</td><td>查看/配置</td></tr><tr><td>02</td><td>ping ip地中</td><td>ping</td><td>检测目标ip地址的连接是否正常</td></tr><tr><td>## 2.1 网卡和IP地址</td><td></td><td></td><td></td></tr><tr><td><strong>网卡</strong></td><td></td><td></td><td></td></tr><tr><td>- 网卡是一个专门负责网络通讯的硬件设备</td><td></td><td></td><td></td></tr><tr><td>- IP地址是设置在网卡上的地址信息</td><td></td><td></td><td></td></tr><tr><td>我们可以把电脑比作电话，网卡相当于SIM卡，IP地址相当于电话号码</td><td></td><td></td><td></td></tr><tr><td><strong>IP地址</strong></td><td></td><td></td><td></td></tr><tr><td>- 每台联网的电脑上都有IP地址，是保证电脑之间正常通讯的重要设置</td><td></td><td></td><td></td></tr><tr><td><strong>注意：</strong>每台电脑的IP地址不能相同，否则会出现IP地址冲突，并且没有办法正常通讯</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 远程管理命令-01关机和重启</title>
      <link href="/2019/07/27/Linux-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-01%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/"/>
      <url>/2019/07/27/Linux-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4-01%E5%85%B3%E6%9C%BA%E5%92%8C%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="关机-重启"><a href="#关机-重启" class="headerlink" title="关机/重启"></a>关机/重启</h1><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机/重新启动</td></tr></tbody></table><p>1.1 shutdown</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr><tr><td><strong>提示：</strong></td><td></td></tr><tr><td>- 不指定选项和参数，默认表示一分钟之后关闭电脑</td><td></td></tr><tr><td>- 远程维护服务器时，最好不要关闭系统，而应该重启系统</td><td></td></tr><tr><td><strong>常用命令示例</strong></td><td></td></tr><tr><td>1. 重新启动系统，其中 now 表示现在</td><td></td></tr><tr><td><code>shutdown now</code></td><td></td></tr><tr><td>2. 立刻关机，其中now表示现在</td><td></td></tr><tr><td><code>shutdown now</code></td><td></td></tr><tr><td>3. 系统在今天的 20：35 会关机</td><td></td></tr><tr><td><code>shutdown 20：35</code></td><td></td></tr><tr><td>4. 取消之前指定的关机计划</td><td></td></tr><tr><td><code>shutdown -c</code></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Linux文件和目录常用命令</title>
      <link href="/2019/07/26/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/26/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="文件和目录常用命令"><a href="#文件和目录常用命令" class="headerlink" title="文件和目录常用命令"></a>文件和目录常用命令</h1><h2 id="1，查看目录内容"><a href="#1，查看目录内容" class="headerlink" title="1，查看目录内容"></a>1，查看目录内容</h2><p><code>ls</code></p><h3 id="1-1-终端实用技巧"><a href="#1-1-终端实用技巧" class="headerlink" title="1.1 终端实用技巧"></a>1.1 终端实用技巧</h3><h4 id="1，自动补全"><a href="#1，自动补全" class="headerlink" title="1，自动补全"></a>1，自动补全</h4><ul><li>在敲出 文件/目录/命令/的前几个字母之后，按下tab键</li></ul><ol><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 文件/目录/命令，再按一下tab键，系统会提示可能存在的命令<h4 id="2，曾经使用过的命令"><a href="#2，曾经使用过的命令" class="headerlink" title="2，曾经使用过的命令"></a>2，曾经使用过的命令</h4></li><li>按 上/下 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按ctrl+c<h3 id="1-2-ls命令说明"><a href="#1-2-ls命令说明" class="headerlink" title="1.2 ls命令说明"></a>1.2 ls命令说明</h3></li></ol><ul><li>ls是英文单词list的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于DOS下的dir命令</li></ul><ol><li>Linux下文件的目录的特点</li><li>Linux文件或者目录名称最长可以有256个字符</li><li>以 . 开头的文件为隐藏文件，需要用 -a 参数才能显示</li><li>. 代表当前目录</li><li>.. 代表上一级目录（cd ..）<h3 id="1-3-ls常用选项"><a href="#1-3-ls常用选项" class="headerlink" title="1.3 ls常用选项"></a>1.3 ls常用选项</h3></li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件的大小</td></tr></tbody></table><h3 id="1-4-ls-通配符的使用"><a href="#1-4-ls-通配符的使用" class="headerlink" title="1.4 ls 通配符的使用"></a>1.4 ls 通配符的使用</h3><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意一个字符</td></tr><tr><td>？</td><td>代表任意一个字符，至少一个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中任意一个</td></tr><tr><td>[abc]</td><td>匹配a、b、c中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从a到f范围内的任意一个字符</td></tr></tbody></table><h2 id="2，切换目录"><a href="#2，切换目录" class="headerlink" title="2，切换目录"></a>2，切换目录</h2><p><code>cd</code></p><h3 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 cd</h3><ul><li>cd是英文单词change directory的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li></ul><p><strong>注意：Linux所有的目录和文件名都是大小写敏感的</strong></p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd ~</td><td>切换到当前用户的主目录（/home/用户目录）</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr><tr><td>cd</td><td>切换到当前用户的主目录（/home/用户目录）</td></tr></tbody></table><h3 id="2-2-相对路径和绝对路径"><a href="#2-2-相对路径和绝对路径" class="headerlink" title="2.2 相对路径和绝对路径"></a>2.2 相对路径和绝对路径</h3><ul><li><strong>相对路径</strong>：在输入路径时，最前面不是 / 或者 ~ ，表示相对<strong>当前目录</strong>所在的目录位置</li><li><strong>绝对路径</strong>：在输入路径时，最前面的是 / 或者 ~ ，表示从<strong>根目录/家目录</strong>最开始的具体目录位置<h2 id="3，创建和删除操作"><a href="#3，创建和删除操作" class="headerlink" title="3，创建和删除操作"></a>3，创建和删除操作</h2><code>touch</code><br><code>rm</code><br><code>mkdir</code><h3 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 touch</h3></li><li>创建文件或者修改文件时间</li></ul><ol><li>如果文件不存在，可以创建一个空白文件</li><li>如果文件已经存在，可以修改文件末次修改日期<h3 id="3-2-mkdir"><a href="#3-2-mkdir" class="headerlink" title="3.2 mkdir"></a>3.2 mkdir</h3></li></ol><ul><li>创建一个新的目录（mkdir -p a/b/c/d）</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><p><strong>新建目录的名称不能与当前目录中已有的目录或文件同明</strong></p><h3 id="3-3-rm"><a href="#3-3-rm" class="headerlink" title="3.3 rm"></a>3.3 rm</h3><ul><li>删除文件或目录</li></ul><ol><li>使用rm命令要小心，因为文件删除后不能恢复</li></ol><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，删除文件夹时必须加此参数</td></tr><tr><td>（rm -r a）删除a目录下所有内容</td><td></td></tr></tbody></table><h2 id="4，拷贝和移动文件"><a href="#4，拷贝和移动文件" class="headerlink" title="4，拷贝和移动文件"></a>4，拷贝和移动文件</h2><p><code>cp</code><br><code>mv</code></p><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree[目录名]</td><td>tree</td><td>以树状图列出文件目录结构</td></tr><tr><td>02</td><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr><tr><td>03</td><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录/文件或者目录重命名</td></tr></tbody></table><h3 id="4-1-tree"><a href="#4-1-tree" class="headerlink" title="4.1 tree"></a>4.1 tree</h3><ul><li>tree 命令可以以树状图列出文件目录结构</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h3 id="4-2-cp"><a href="#4-2-cp" class="headerlink" title="4.2 cp"></a>4.2 cp</h3><ul><li>cp 命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>已经存在的目标文件会直接覆盖，不会提示</td></tr><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给除的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件为一个目录名</td></tr></tbody></table><h3 id="4-3-mv"><a href="#4-3-mv" class="headerlink" title="4.3 mv"></a>4.3 mv</h3><ul><li>mv 命令可以用来移动文件或者目录，也可以给文件或者目录重命名</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><h2 id="5，查看文件内容"><a href="#5，查看文件内容" class="headerlink" title="5，查看文件内容"></a>5，查看文件内容</h2><p><code>cat</code><br><code>more</code><br><code>grep</code></p><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h3 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 cat</h3><ul><li>cat 命令可以用来查看文件内容、常见文件、文件合并、追加文件内容等功能</li><li>cat 会一次显示所有的内容，适合查看内容较少的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出所有行编号</td></tr><tr><td><em>Linux 中还有一个 nl 命令和 cat -b 的效果等价</em></td><td></td></tr></tbody></table><h3 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 more</h3><ul><li>more 命令可以用于分屏显示文件内容，每次只显示一页内容</li><li>适合与查看内容较多的文本文件<br>使用 more 的操作键：</li></ul><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 word 字符串</td></tr></tbody></table><h3 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 grep</h3><ul><li>Linux系统中 grep 命令是一种强大的文本搜索工具</li><li>grep允许对文本文件进行模式查找，所谓模式查找，又被称为正则表达式</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>- 常用的两种模式查找</td><td></td></tr></tbody></table><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜索以a开头的行（grep ^x xxx.txt）</td></tr><tr><td>ke$</td><td>行尾，搜索以ke结束的行(grep [-n加行号]x$ xxx.txt)</td></tr></tbody></table><p><code>grep -n xx(搜索的内容) xxx（文件）</code></p><h2 id="6，其他"><a href="#6，其他" class="headerlink" title="6，其他"></a>6，其他</h2><p><code>exho</code><br><code>重定向 &gt; 和 &gt;&gt;</code><br><code>管道 |</code></p><h3 id="6-1-echo文字内容"><a href="#6-1-echo文字内容" class="headerlink" title="6.1 echo文字内容"></a>6.1 echo文字内容</h3><ul><li>echo会在终端中显示参数指定的文字，通常会和重定向联合使用<h3 id="6-2-重定向-gt-和-gt-gt"><a href="#6-2-重定向-gt-和-gt-gt" class="headerlink" title="6.2 重定向 &gt; 和 &gt;&gt;"></a>6.2 重定向 &gt; 和 &gt;&gt;</h3></li><li>Linux 允许将命令执行结果重定到一个文件</li><li>将本应显示在终端上的内容输出/追加到指定文件中<br>其中</li></ul><ol><li><blockquote><p>表示输出，会覆盖文件原有的内容</p></blockquote></li><li><blockquote><blockquote><p>表示追加，会将内容追加到已有文件的末尾<br><code>ls -lh &gt;&gt; a</code>(把列出的内容显示追加到a文件中，终端可以用cat a列出内容到终端)</p></blockquote></blockquote><h3 id="6-3-管道"><a href="#6-3-管道" class="headerlink" title="6.3 管道 |"></a>6.3 管道 |</h3></li></ol><ul><li>Linux 允许将一个命令的输出可以通过管道做为另一个命令的输入</li><li>可以理解显示生活中的管子，管子的一头塞东西进去，另一头取出来，这里 | 的左右分为两段，左端塞东西（写），右端取东西（读）<br>常用的管道命令有：</li></ul><ol><li>more：分屏显示内容 <code>ls -lha ~| more</code></li><li>grep：在命令执行结果的基础上查询指定的文本 <code>ls -lha ~ | grep</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Linux常用命令</title>
      <link href="/2019/07/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/26/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p><strong>Linux是区分大小写的</strong></p><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>cd[目录名]</td><td>change directory</td><td>切换文件夹（cd xxx）</td></tr><tr><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>touch[文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>mkdir[目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>rm[文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li>ctrl + shift + =    放大终端窗口的字体显示</li><li>ctrl + -    缩小终端窗口的字体显示</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Linux终端命令格式</title>
      <link href="/2019/07/26/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/07/26/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux终端命令格式"><a href="#Linux终端命令格式" class="headerlink" title="Linux终端命令格式"></a>Linux终端命令格式</h2><h3 id="1，终端命令格式"><a href="#1，终端命令格式" class="headerlink" title="1，终端命令格式"></a>1，终端命令格式</h3><p>command [-options] [parameter]<br><strong>说明：</strong></p><ul><li>command：命令名，相应功能的英文单词或单词的缩写</li><li>[-options]：选项，可用来对命令进行控制，也可以省略</li><li>parameter：传给命令的参数，可以是零个，一个，或者多个</li></ul><h3 id="2，查阅命令帮助信息"><a href="#2，查阅命令帮助信息" class="headerlink" title="2，查阅命令帮助信息"></a>2，查阅命令帮助信息</h3><p>–help<br><code>command --help</code><br><strong>说明：</strong></p><ul><li>显示command命令的帮助信息</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.MySql修改表</title>
      <link href="/2019/07/26/MySql%E4%BF%AE%E6%94%B9%E8%A1%A8/"/>
      <url>/2019/07/26/MySql%E4%BF%AE%E6%94%B9%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql修改表"><a href="#MySql修改表" class="headerlink" title="MySql修改表"></a>MySql修改表</h2><p>对表的修改失败要用rollback（）方法进行回滚<br>execute()中要用元组，mysql传递一个参数的时候，可以不用逗号(103)或者(103,)都可以，在sqlite中逗号不能少<br>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改有rollback</span></span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 创建与数据库的连接</span></span><br><span class="line">    con = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line">    <span class="comment"># 创建游标对象cursor</span></span><br><span class="line">    cursor = con.cursor()</span><br><span class="line">    <span class="comment"># 写修改的sql</span></span><br><span class="line">    sql = <span class="string">'update student set sname = %s where sno = %s'</span></span><br><span class="line">    cursor.execute(sql, (<span class="string">'哈哈'</span>, 100))     <span class="comment"># 要用元组，</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'修改失败'</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    con.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure><h2 id="MySql删除表"><a href="#MySql删除表" class="headerlink" title="MySql删除表"></a>MySql删除表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 修改有rollback</span><br><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    # 创建与数据库的连接</span><br><span class="line">    con = pymysql.connect(host=&apos;localhost&apos;, user=&apos;root&apos;, password=&apos;root&apos;, database=&apos;testmysql&apos;, port=3306)</span><br><span class="line">    # 创建游标对象cursor</span><br><span class="line">    cursor = con.cursor()</span><br><span class="line">    # 写修改的sql</span><br><span class="line">    sql = &apos;update student set sname = %s where sno = %s&apos;</span><br><span class="line">    cursor.execute(sql, (&apos;哈哈&apos;, 100))     # 要用元组，</span><br><span class="line">    con.commit（）</span><br><span class="line">    print(&apos;修改成功&apos;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">    print(&apos;修改失败&apos;)</span><br><span class="line">    con.rollback()</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    # 关闭数据库连接</span><br><span class="line">    con.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Mysql查询数据</title>
      <link href="/2019/07/26/Mysql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/Mysql%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>  <strong>【实例】</strong><br>  获取要用元组的下标索引，与插入不同的是要处理结果集</p><pre><code class="bash">import pymysql<span class="comment"># 创建连接</span>con = pymysql.connect(host=<span class="string">'localhost'</span>, password=<span class="string">'root'</span>, user=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)<span class="comment"># 创建事务</span>cur = con.cursor()<span class="comment"># 编写查询的sql</span>sql = <span class="string">'select * from student'</span><span class="comment"># 执行sql</span>try:    cur.execute(sql)    <span class="comment"># 处理结果集</span>    stu = cur.fetchone()    <span class="built_in">print</span>(stu)    students = cur.fetchall()    <span class="keyword">for</span> student <span class="keyword">in</span> students:    <span class="comment"># 获取要用下标，索引从0开始</span>        sno = student[0]        sname = student[1]        sex = student[2]        age = student[3]        score = student[4]        <span class="built_in">print</span>(<span class="string">'sno:'</span>, sno, <span class="string">'sname:'</span>, sname, <span class="string">'age:'</span>, age, <span class="string">'sex:'</span>, sex, <span class="string">'age:'</span>, age,  <span class="string">'score:'</span>, score)except Exception as e:    <span class="built_in">print</span>(e)    <span class="built_in">print</span>(<span class="string">'查询失败'</span>)finally:    cur.close()    con.close()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.MySql插入数据</title>
      <link href="/2019/07/26/MySql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/07/26/MySql%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"><span class="comment"># 创建与数据的连接</span></span><br><span class="line">con = pymysql.connect(host=<span class="string">'localhost'</span>, password=<span class="string">'root'</span>, user=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 写插入数据库的sql</span></span><br><span class="line">sql = <span class="string">'insert into student(sno, sname, sex, age, score) values(%s, %s, %s, %s, %s)'</span>      <span class="comment"># s要小写，不然会报unsupported format character 'S' (0x53) at index 72</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行sql插入一条数据</span></span><br><span class="line">    <span class="comment"># cur.execute(sql, (1100, '张三', '男', 33, 33.3))</span></span><br><span class="line">    <span class="comment"># 插入多条数据</span></span><br><span class="line">    args = [(102, <span class="string">'张2'</span>, <span class="string">'男'</span>, 33, 33.3), (103, <span class="string">'张4'</span>, <span class="string">'男'</span>, 33, 33.3), (104, <span class="string">'张5'</span>, <span class="string">'男'</span>, 33, 33.3)]     <span class="comment"># 插入多条数据要用executemany</span></span><br><span class="line">    cur.executemany(sql, args)</span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    con.close()</span><br><span class="line">    cur.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.MySql创建表</title>
      <link href="/2019/07/26/MySql%E5%88%9B%E5%BB%BA%E8%A1%A8/"/>
      <url>/2019/07/26/MySql%E5%88%9B%E5%BB%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql创建表"><a href="#MySql创建表" class="headerlink" title="MySql创建表"></a>MySql创建表</h2><p>首先要在navicat中连接数据库，创建一个testtmysql的数据库<br>  <strong>【实例】</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 创建与数据库的连接</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, database=<span class="string">'testmysql'</span>, port=3306)</span><br><span class="line">    <span class="comment"># 创建游标对象cursor</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="comment"># 使用execute()方法执行sql，如果表存在则删除</span></span><br><span class="line">    cursor.execute(<span class="string">'drop table if EXISTS student'</span>)</span><br><span class="line">    <span class="comment"># 创建表的sql</span></span><br><span class="line">    sql = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        create table student(</span></span><br><span class="line"><span class="string">        sno int(8) primary key auto_increment,</span></span><br><span class="line"><span class="string">        sname varchar(30) not null,</span></span><br><span class="line"><span class="string">        sex varchar(5) ,</span></span><br><span class="line"><span class="string">        age int(2),</span></span><br><span class="line"><span class="string">        score float(3,1)</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建成功"</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'创建表失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    db.close()</span><br><span class="line">    cursor.close()</span><br></pre></td></tr></table></figure><p>![]<br>(<a href="https://github.com/gxnucgb/python/blob/master/MYSq%E5%88%9B%E5%BB%BA%E8%A1%A8.png">https://github.com/gxnucgb/python/blob/master/MYSq%E5%88%9B%E5%BB%BA%E8%A1%A8.png</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3学习</title>
      <link href="/2019/07/25/sqlite3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/07/25/sqlite3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1，操作流程"><a href="#1，操作流程" class="headerlink" title="1，操作流程"></a>1，操作流程</h2><p>（1）先在文件夹创建出一个.db文件<br>  （2）导入相关库或模块（SQLite3)<br>  （3）使用connect()连接数据库并获取数据库对象。他提供了以下方法：<br>  .cursor() 方法来创建一个游标对象<br>  .commit() 方法来处理事务提交<br>  .rollback() 方法来处理事务回滚<br>  .close() 方法来关闭一个数据库连接<br>  （4）使用con.cursor() 获取游标对象<br>  （5）使用游标对象的方法execute()、executemany()、fetchall() 等来操作数据库，实现数据库插入、修改和删除操作，并查询获取显示相关的记录。在Python程序中，连接函数sqlite3.connert()有如下两个常用的参数：<br>database:表示要访问的数据库名。<br>timeout():表示访问数据的超时设定。<br>  （6）使用close()关闭游标对象和数据库连接。数据库操作完成之后，必须及时调用其close()方法关闭数据库连接，这样做的目的是减轻数据服务器的压力。<br>  （7）他的的不同有sql语句，执行的时候的参数</p><h2 id="2，使用SQLite3创建表"><a href="#2，使用SQLite3创建表" class="headerlink" title="2，使用SQLite3创建表"></a>2，使用SQLite3创建表</h2><p>使用sqlite3模块的connect方法来创建/打开数据库，需要指定数据库路径，不存在则创建一个新的数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con = sqlite3.connect(<span class="string">'e:/sqlitedb/first.db'</span>)   <span class="comment">#路径的那个斜杠要反过来写，文件不存在则创建文件</span></span><br></pre></td></tr></table></figure><p><strong><em>【实例】</em></strong>使用sqlite3创建表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor(游标)对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">'create table Student (id int(10) primary key, \</span></span><br><span class="line"><span class="string">                                name char(20) not null \</span></span><br><span class="line"><span class="string">                              )'</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行语句</span></span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建成功"</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"创建失败"</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="2，使用SQLite3插入数据"><a href="#2，使用SQLite3插入数据" class="headerlink" title="2，使用SQLite3插入数据"></a>2，使用SQLite3插入数据</h2><p>调用游标对象的execute执行插入的sql，使用executemany()执行多条sql语句，使用executmany()比循环使用execu()执行多条sql语句效率高<br><strong><em>【实例】</em></strong>使用sqlite3在表中插入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 在硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 执行sql创建表</span></span><br><span class="line">sql = <span class="string">'insert into Student(id, name) values(?, ?)'</span>      <span class="comment"># 问号是用来占位的</span></span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql, (112, <span class="string">'小潘'</span>))       <span class="comment"># 用元组来写数据</span></span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    插入多条数据</span></span><br><span class="line"><span class="string">    cur.executemany(sql, [(100, "小陈"), (101, "小李")])    #执行多条插入的时候，要用列表＋元组来存，插入重复数据会报错</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    <span class="comment"># 提交事务</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'插入成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"插入失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="2，使用SQLite3查询数据"><a href="#2，使用SQLite3查询数据" class="headerlink" title="2，使用SQLite3查询数据"></a>2，使用SQLite3查询数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3查询表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line">sql = <span class="string">'select * from Student'</span></span><br><span class="line">try:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    <span class="comment"># 与插入不同的是要获取结果集</span></span><br><span class="line">    <span class="comment"># 获取一条结果</span></span><br><span class="line">    stu1 = cur.fetchone()</span><br><span class="line">    <span class="built_in">print</span>(stu1)</span><br><span class="line">    stu_all = cur.fetchall()</span><br><span class="line">    <span class="comment"># print(stu_all)</span></span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> stu_all:</span><br><span class="line">        <span class="built_in">print</span>(stu)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'查询所有数据失败'</span>)</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="3，使用SQLite3修改数据"><a href="#3，使用SQLite3修改数据" class="headerlink" title="3，使用SQLite3修改数据"></a>3，使用SQLite3修改数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3修改表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"><span class="comment"># 写修改语句</span></span><br><span class="line">sql = <span class="string">'update Student set name=? where id = ?'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">try:</span><br><span class="line">     <span class="comment"># 执行修改</span></span><br><span class="line">     cur.execute(sql, (<span class="string">"hahah"</span>, 112))</span><br><span class="line">     <span class="comment"># 提交事务</span></span><br><span class="line">     con.commit()</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"修改失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="3，使用SQLite3删除数据"><a href="#3，使用SQLite3删除数据" class="headerlink" title="3，使用SQLite3删除数据"></a>3，使用SQLite3删除数据</h2><p><strong><em>【实例】</em></strong>使用sqlite3删除表中数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入sqlite3模块</span></span><br><span class="line">import sqlite3</span><br><span class="line"><span class="comment"># 硬盘上创建连接</span></span><br><span class="line">con = sqlite3.connect(<span class="string">'E:/python/tank/sqlite3.db'</span>)</span><br><span class="line"><span class="comment"># 获取cursor对象</span></span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写删除语句</span></span><br><span class="line">sqldel = <span class="string">'delete from Student where id =?'</span></span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line">try:</span><br><span class="line">    <span class="comment"># 执行删除</span></span><br><span class="line">    cur.execute(sqldel, (112,))       <span class="comment"># 必须是元组类型，所以（112, )逗号不能少</span></span><br><span class="line">    con.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"修改失败"</span>)</span><br><span class="line">    con.rollback()</span><br><span class="line">finally:</span><br><span class="line">    <span class="comment"># 关闭游标</span></span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上面的实例中，首先定义查询在上述实例代码中，首先定义查询所有数据、插入数据、修改数据、删除数据的方法。然后，定义主方法中依次建立连接，获取连接的cursor，通过cursor的execute()等方法来执行SQL语句，调用插入记录、更加记录、删除记录的方法。<br>  特别注意：execute参数中的是sql语句和元组！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/24/hello-world/"/>
      <url>/2019/07/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>坦克项目小学习1</title>
      <link href="/2019/07/24/%E5%9D%A6%E5%85%8B%E9%A1%B9%E7%9B%AE%E5%B0%8F%E5%AD%A6%E4%B9%A01/"/>
      <url>/2019/07/24/%E5%9D%A6%E5%85%8B%E9%A1%B9%E7%9B%AE%E5%B0%8F%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h4 id="坦克小项目学习"><a href="#坦克小项目学习" class="headerlink" title="坦克小项目学习"></a>坦克小项目学习</h4><h5 id="1，分析。"><a href="#1，分析。" class="headerlink" title="1，分析。"></a>1，分析。</h5><p>在写一个项目代码之前，应该要对项目进行分析，分析他可以分为多少个模块，进而得到他应该有多少个类，分析出他的主类是什么。  </p><h5 id="2，再分析。"><a href="#2，再分析。" class="headerlink" title="2，再分析。"></a>2，再分析。</h5><p>  在得到有多少个类之后，对类进行分析，分析他具有什么方法，具有什么属性（相似的类可以使用继承。  </p><h5 id="3，建框架。"><a href="#3，建框架。" class="headerlink" title="3，建框架。"></a>3，建框架。</h5><p>在pycharm创建的项目中，先写出这些类还有方法，构建出一个项目框架。  </p><h5 id="4，写主窗口。"><a href="#4，写主窗口。" class="headerlink" title="4，写主窗口。"></a>4，写主窗口。</h5><p>写出显示主窗口，可到官网<a href="http://www.pygame.org学习查看文档。" target="_blank" rel="noopener">www.pygame.org学习查看文档。</a>   </p><h6 id="1，导入pygame"><a href="#1，导入pygame" class="headerlink" title="1，导入pygame"></a>1，导入pygame</h6><h6 id="2，显示一个窗口先要调用init方法初始化一个窗口"><a href="#2，显示一个窗口先要调用init方法初始化一个窗口" class="headerlink" title="2，显示一个窗口先要调用init方法初始化一个窗口"></a>2，显示一个窗口先要调用init方法初始化一个窗口</h6><p>  set_mode(resolution = (0, 0), flags = 0, depth = 0)   -&gt;suface，创建一个显示surface，传入的参数是resolution参数是一对表示宽度和高度的数字用（元组），flags参数是其他选项的集合，depth表示用于颜色的位数。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Thanks</title>
      <link href="/2019/07/24/Thanks/"/>
      <url>/2019/07/24/Thanks/</url>
      
        <content type="html"><![CDATA[<h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="测试测试！！！"><a href="#测试测试！！！" class="headerlink" title="测试测试！！！"></a>测试测试！！！</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
